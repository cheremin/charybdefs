/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.charybde;

@SuppressWarnings( { "cast", "rawtypes", "serial", "unchecked", "unused" } )
@javax.annotation.Generated( value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-04-28" )
public class server {

	public interface Iface {

		public java.util.List<java.lang.String> get_methods() throws org.apache.thrift.TException;

		public void clear_all_faults() throws org.apache.thrift.TException;

		public void clear_fault( java.lang.String method ) throws org.apache.thrift.TException;

		public void set_fault( java.util.List<java.lang.String> methods, boolean random, int err_no, int probability, java.lang.String regexp, boolean kill_caller, int delay_us, boolean auto_delay ) throws org.apache.thrift.TException;

		public void set_all_fault( boolean random, int err_no, int probability, java.lang.String regexp, boolean kill_caller, int delay_us, boolean auto_delay ) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void get_methods( org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler ) throws org.apache.thrift.TException;

		public void clear_all_faults( org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler ) throws org.apache.thrift.TException;

		public void clear_fault( java.lang.String method, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler ) throws org.apache.thrift.TException;

		public void set_fault( java.util.List<java.lang.String> methods, boolean random, int err_no, int probability, java.lang.String regexp, boolean kill_caller, int delay_us, boolean auto_delay, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler ) throws org.apache.thrift.TException;

		public void set_all_fault( boolean random, int err_no, int probability, java.lang.String regexp, boolean kill_caller, int delay_us, boolean auto_delay, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler ) throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient( org.apache.thrift.protocol.TProtocol prot ) {
				return new Client( prot );
			}

			public Client getClient( org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot ) {
				return new Client( iprot, oprot );
			}
		}

		public Client( org.apache.thrift.protocol.TProtocol prot ) {
			super( prot, prot );
		}

		public Client( org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot ) {
			super( iprot, oprot );
		}

		public java.util.List<java.lang.String> get_methods() throws org.apache.thrift.TException {
			send_get_methods();
			return recv_get_methods();
		}

		public void send_get_methods() throws org.apache.thrift.TException {
			get_methods_args args = new get_methods_args();
			sendBase( "get_methods", args );
		}

		public java.util.List<java.lang.String> recv_get_methods() throws org.apache.thrift.TException {
			get_methods_result result = new get_methods_result();
			receiveBase( result, "get_methods" );
			if( result.isSetSuccess() ) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException( org.apache.thrift.TApplicationException.MISSING_RESULT, "get_methods failed: unknown result" );
		}

		public void clear_all_faults() throws org.apache.thrift.TException {
			send_clear_all_faults();
			recv_clear_all_faults();
		}

		public void send_clear_all_faults() throws org.apache.thrift.TException {
			clear_all_faults_args args = new clear_all_faults_args();
			sendBase( "clear_all_faults", args );
		}

		public void recv_clear_all_faults() throws org.apache.thrift.TException {
			clear_all_faults_result result = new clear_all_faults_result();
			receiveBase( result, "clear_all_faults" );
			return;
		}

		public void clear_fault( java.lang.String method ) throws org.apache.thrift.TException {
			send_clear_fault( method );
			recv_clear_fault();
		}

		public void send_clear_fault( java.lang.String method ) throws org.apache.thrift.TException {
			clear_fault_args args = new clear_fault_args();
			args.setMethod( method );
			sendBase( "clear_fault", args );
		}

		public void recv_clear_fault() throws org.apache.thrift.TException {
			clear_fault_result result = new clear_fault_result();
			receiveBase( result, "clear_fault" );
			return;
		}

		public void set_fault( java.util.List<java.lang.String> methods, boolean random, int err_no, int probability, java.lang.String regexp, boolean kill_caller, int delay_us, boolean auto_delay ) throws org.apache.thrift.TException {
			send_set_fault( methods, random, err_no, probability, regexp, kill_caller, delay_us, auto_delay );
			recv_set_fault();
		}

		public void send_set_fault( java.util.List<java.lang.String> methods, boolean random, int err_no, int probability, java.lang.String regexp, boolean kill_caller, int delay_us, boolean auto_delay ) throws org.apache.thrift.TException {
			set_fault_args args = new set_fault_args();
			args.setMethods( methods );
			args.setRandom( random );
			args.setErr_no( err_no );
			args.setProbability( probability );
			args.setRegexp( regexp );
			args.setKill_caller( kill_caller );
			args.setDelay_us( delay_us );
			args.setAuto_delay( auto_delay );
			sendBase( "set_fault", args );
		}

		public void recv_set_fault() throws org.apache.thrift.TException {
			set_fault_result result = new set_fault_result();
			receiveBase( result, "set_fault" );
			return;
		}

		public void set_all_fault( boolean random, int err_no, int probability, java.lang.String regexp, boolean kill_caller, int delay_us, boolean auto_delay ) throws org.apache.thrift.TException {
			send_set_all_fault( random, err_no, probability, regexp, kill_caller, delay_us, auto_delay );
			recv_set_all_fault();
		}

		public void send_set_all_fault( boolean random, int err_no, int probability, java.lang.String regexp, boolean kill_caller, int delay_us, boolean auto_delay ) throws org.apache.thrift.TException {
			set_all_fault_args args = new set_all_fault_args();
			args.setRandom( random );
			args.setErr_no( err_no );
			args.setProbability( probability );
			args.setRegexp( regexp );
			args.setKill_caller( kill_caller );
			args.setDelay_us( delay_us );
			args.setAuto_delay( auto_delay );
			sendBase( "set_all_fault", args );
		}

		public void recv_set_all_fault() throws org.apache.thrift.TException {
			set_all_fault_result result = new set_all_fault_result();
			receiveBase( result, "set_all_fault" );
			return;
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory( org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory ) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient( org.apache.thrift.transport.TNonblockingTransport transport ) {
				return new AsyncClient( protocolFactory, clientManager, transport );
			}
		}

		public AsyncClient( org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport ) {
			super( protocolFactory, clientManager, transport );
		}

		public void get_methods( org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler ) throws org.apache.thrift.TException {
			checkReady();
			get_methods_call method_call = new get_methods_call( resultHandler, this, ___protocolFactory, ___transport );
			this.___currentMethod = method_call;
			___manager.call( method_call );
		}

		public static class get_methods_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
			public get_methods_call( org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport ) throws org.apache.thrift.TException {
				super( client, protocolFactory, transport, resultHandler, false );
			}

			public void write_args( org.apache.thrift.protocol.TProtocol prot ) throws org.apache.thrift.TException {
				prot.writeMessageBegin( new org.apache.thrift.protocol.TMessage( "get_methods", org.apache.thrift.protocol.TMessageType.CALL, 0 ) );
				get_methods_args args = new get_methods_args();
				args.write( prot );
				prot.writeMessageEnd();
			}

			public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
				if( getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ ) {
					throw new java.lang.IllegalStateException( "Method call not finished!" );
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport( getFrameBuffer().array() );
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol( memoryTransport );
				return ( new Client( prot ) ).recv_get_methods();
			}
		}

		public void clear_all_faults( org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler ) throws org.apache.thrift.TException {
			checkReady();
			clear_all_faults_call method_call = new clear_all_faults_call( resultHandler, this, ___protocolFactory, ___transport );
			this.___currentMethod = method_call;
			___manager.call( method_call );
		}

		public static class clear_all_faults_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
			public clear_all_faults_call( org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport ) throws org.apache.thrift.TException {
				super( client, protocolFactory, transport, resultHandler, false );
			}

			public void write_args( org.apache.thrift.protocol.TProtocol prot ) throws org.apache.thrift.TException {
				prot.writeMessageBegin( new org.apache.thrift.protocol.TMessage( "clear_all_faults", org.apache.thrift.protocol.TMessageType.CALL, 0 ) );
				clear_all_faults_args args = new clear_all_faults_args();
				args.write( prot );
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException {
				if( getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ ) {
					throw new java.lang.IllegalStateException( "Method call not finished!" );
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport( getFrameBuffer().array() );
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol( memoryTransport );
				return null;
			}
		}

		public void clear_fault( java.lang.String method, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler ) throws org.apache.thrift.TException {
			checkReady();
			clear_fault_call method_call = new clear_fault_call( method, resultHandler, this, ___protocolFactory, ___transport );
			this.___currentMethod = method_call;
			___manager.call( method_call );
		}

		public static class clear_fault_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
			private java.lang.String method;

			public clear_fault_call( java.lang.String method, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport ) throws org.apache.thrift.TException {
				super( client, protocolFactory, transport, resultHandler, false );
				this.method = method;
			}

			public void write_args( org.apache.thrift.protocol.TProtocol prot ) throws org.apache.thrift.TException {
				prot.writeMessageBegin( new org.apache.thrift.protocol.TMessage( "clear_fault", org.apache.thrift.protocol.TMessageType.CALL, 0 ) );
				clear_fault_args args = new clear_fault_args();
				args.setMethod( method );
				args.write( prot );
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException {
				if( getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ ) {
					throw new java.lang.IllegalStateException( "Method call not finished!" );
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport( getFrameBuffer().array() );
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol( memoryTransport );
				return null;
			}
		}

		public void set_fault( java.util.List<java.lang.String> methods, boolean random, int err_no, int probability, java.lang.String regexp, boolean kill_caller, int delay_us, boolean auto_delay, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler ) throws org.apache.thrift.TException {
			checkReady();
			set_fault_call method_call = new set_fault_call( methods, random, err_no, probability, regexp, kill_caller, delay_us, auto_delay, resultHandler, this, ___protocolFactory, ___transport );
			this.___currentMethod = method_call;
			___manager.call( method_call );
		}

		public static class set_fault_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
			private java.util.List<java.lang.String> methods;
			private boolean random;
			private int err_no;
			private int probability;
			private java.lang.String regexp;
			private boolean kill_caller;
			private int delay_us;
			private boolean auto_delay;

			public set_fault_call( java.util.List<java.lang.String> methods, boolean random, int err_no, int probability, java.lang.String regexp, boolean kill_caller, int delay_us, boolean auto_delay, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport ) throws org.apache.thrift.TException {
				super( client, protocolFactory, transport, resultHandler, false );
				this.methods = methods;
				this.random = random;
				this.err_no = err_no;
				this.probability = probability;
				this.regexp = regexp;
				this.kill_caller = kill_caller;
				this.delay_us = delay_us;
				this.auto_delay = auto_delay;
			}

			public void write_args( org.apache.thrift.protocol.TProtocol prot ) throws org.apache.thrift.TException {
				prot.writeMessageBegin( new org.apache.thrift.protocol.TMessage( "set_fault", org.apache.thrift.protocol.TMessageType.CALL, 0 ) );
				set_fault_args args = new set_fault_args();
				args.setMethods( methods );
				args.setRandom( random );
				args.setErr_no( err_no );
				args.setProbability( probability );
				args.setRegexp( regexp );
				args.setKill_caller( kill_caller );
				args.setDelay_us( delay_us );
				args.setAuto_delay( auto_delay );
				args.write( prot );
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException {
				if( getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ ) {
					throw new java.lang.IllegalStateException( "Method call not finished!" );
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport( getFrameBuffer().array() );
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol( memoryTransport );
				return null;
			}
		}

		public void set_all_fault( boolean random, int err_no, int probability, java.lang.String regexp, boolean kill_caller, int delay_us, boolean auto_delay, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler ) throws org.apache.thrift.TException {
			checkReady();
			set_all_fault_call method_call = new set_all_fault_call( random, err_no, probability, regexp, kill_caller, delay_us, auto_delay, resultHandler, this, ___protocolFactory, ___transport );
			this.___currentMethod = method_call;
			___manager.call( method_call );
		}

		public static class set_all_fault_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
			private boolean random;
			private int err_no;
			private int probability;
			private java.lang.String regexp;
			private boolean kill_caller;
			private int delay_us;
			private boolean auto_delay;

			public set_all_fault_call( boolean random, int err_no, int probability, java.lang.String regexp, boolean kill_caller, int delay_us, boolean auto_delay, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport ) throws org.apache.thrift.TException {
				super( client, protocolFactory, transport, resultHandler, false );
				this.random = random;
				this.err_no = err_no;
				this.probability = probability;
				this.regexp = regexp;
				this.kill_caller = kill_caller;
				this.delay_us = delay_us;
				this.auto_delay = auto_delay;
			}

			public void write_args( org.apache.thrift.protocol.TProtocol prot ) throws org.apache.thrift.TException {
				prot.writeMessageBegin( new org.apache.thrift.protocol.TMessage( "set_all_fault", org.apache.thrift.protocol.TMessageType.CALL, 0 ) );
				set_all_fault_args args = new set_all_fault_args();
				args.setRandom( random );
				args.setErr_no( err_no );
				args.setProbability( probability );
				args.setRegexp( regexp );
				args.setKill_caller( kill_caller );
				args.setDelay_us( delay_us );
				args.setAuto_delay( auto_delay );
				args.write( prot );
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException {
				if( getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ ) {
					throw new java.lang.IllegalStateException( "Method call not finished!" );
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport( getFrameBuffer().array() );
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol( memoryTransport );
				return null;
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger( Processor.class.getName() );

		public Processor( I iface ) {
			super( iface, getProcessMap( new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>() ) );
		}

		protected Processor( I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap ) {
			super( iface, getProcessMap( processMap ) );
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap( java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap ) {
			processMap.put( "get_methods", new get_methods() );
			processMap.put( "clear_all_faults", new clear_all_faults() );
			processMap.put( "clear_fault", new clear_fault() );
			processMap.put( "set_fault", new set_fault() );
			processMap.put( "set_all_fault", new set_all_fault() );
			return processMap;
		}

		public static class get_methods<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_methods_args> {
			public get_methods() {
				super( "get_methods" );
			}

			public get_methods_args getEmptyArgsInstance() {
				return new get_methods_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean handleRuntimeExceptions() {
				return false;
			}

			public get_methods_result getResult( I iface, get_methods_args args ) throws org.apache.thrift.TException {
				get_methods_result result = new get_methods_result();
				result.success = iface.get_methods();
				return result;
			}
		}

		public static class clear_all_faults<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clear_all_faults_args> {
			public clear_all_faults() {
				super( "clear_all_faults" );
			}

			public clear_all_faults_args getEmptyArgsInstance() {
				return new clear_all_faults_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean handleRuntimeExceptions() {
				return false;
			}

			public clear_all_faults_result getResult( I iface, clear_all_faults_args args ) throws org.apache.thrift.TException {
				clear_all_faults_result result = new clear_all_faults_result();
				iface.clear_all_faults();
				return result;
			}
		}

		public static class clear_fault<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clear_fault_args> {
			public clear_fault() {
				super( "clear_fault" );
			}

			public clear_fault_args getEmptyArgsInstance() {
				return new clear_fault_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean handleRuntimeExceptions() {
				return false;
			}

			public clear_fault_result getResult( I iface, clear_fault_args args ) throws org.apache.thrift.TException {
				clear_fault_result result = new clear_fault_result();
				iface.clear_fault( args.method );
				return result;
			}
		}

		public static class set_fault<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_fault_args> {
			public set_fault() {
				super( "set_fault" );
			}

			public set_fault_args getEmptyArgsInstance() {
				return new set_fault_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean handleRuntimeExceptions() {
				return false;
			}

			public set_fault_result getResult( I iface, set_fault_args args ) throws org.apache.thrift.TException {
				set_fault_result result = new set_fault_result();
				iface.set_fault( args.methods, args.random, args.err_no, args.probability, args.regexp, args.kill_caller, args.delay_us, args.auto_delay );
				return result;
			}
		}

		public static class set_all_fault<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_all_fault_args> {
			public set_all_fault() {
				super( "set_all_fault" );
			}

			public set_all_fault_args getEmptyArgsInstance() {
				return new set_all_fault_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean handleRuntimeExceptions() {
				return false;
			}

			public set_all_fault_result getResult( I iface, set_all_fault_args args ) throws org.apache.thrift.TException {
				set_all_fault_result result = new set_all_fault_result();
				iface.set_all_fault( args.random, args.err_no, args.probability, args.regexp, args.kill_caller, args.delay_us, args.auto_delay );
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger( AsyncProcessor.class.getName() );

		public AsyncProcessor( I iface ) {
			super( iface, getProcessMap( new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>() ) );
		}

		protected AsyncProcessor( I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap ) {
			super( iface, getProcessMap( processMap ) );
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap( java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap ) {
			processMap.put( "get_methods", new get_methods() );
			processMap.put( "clear_all_faults", new clear_all_faults() );
			processMap.put( "clear_fault", new clear_fault() );
			processMap.put( "set_fault", new set_fault() );
			processMap.put( "set_all_fault", new set_all_fault() );
			return processMap;
		}

		public static class get_methods<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_methods_args, java.util.List<java.lang.String>> {
			public get_methods() {
				super( "get_methods" );
			}

			public get_methods_args getEmptyArgsInstance() {
				return new get_methods_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler( final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid ) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() {
					public void onComplete( java.util.List<java.lang.String> o ) {
						get_methods_result result = new get_methods_result();
						result.success = o;
						try {
							fcall.sendResponse( fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid );
						} catch( org.apache.thrift.transport.TTransportException e ) {
							_LOGGER.error( "TTransportException writing to internal frame buffer", e );
							fb.close();
						} catch( java.lang.Exception e ) {
							_LOGGER.error( "Exception writing to internal frame buffer", e );
							onError( e );
						}
					}

					public void onError( java.lang.Exception e ) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						get_methods_result result = new get_methods_result();
						if( e instanceof org.apache.thrift.transport.TTransportException ) {
							_LOGGER.error( "TTransportException inside handler", e );
							fb.close();
							return;
						} else if( e instanceof org.apache.thrift.TApplicationException ) {
							_LOGGER.error( "TApplicationException inside handler", e );
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = ( org.apache.thrift.TApplicationException ) e;
						} else {
							_LOGGER.error( "Exception inside handler", e );
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException( org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage() );
						}
						try {
							fcall.sendResponse( fb, msg, msgType, seqid );
						} catch( java.lang.Exception ex ) {
							_LOGGER.error( "Exception writing to internal frame buffer", ex );
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start( I iface, get_methods_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler ) throws org.apache.thrift.TException {
				iface.get_methods( resultHandler );
			}
		}

		public static class clear_all_faults<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clear_all_faults_args, Void> {
			public clear_all_faults() {
				super( "clear_all_faults" );
			}

			public clear_all_faults_args getEmptyArgsInstance() {
				return new clear_all_faults_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler( final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid ) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
					public void onComplete( Void o ) {
						clear_all_faults_result result = new clear_all_faults_result();
						try {
							fcall.sendResponse( fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid );
						} catch( org.apache.thrift.transport.TTransportException e ) {
							_LOGGER.error( "TTransportException writing to internal frame buffer", e );
							fb.close();
						} catch( java.lang.Exception e ) {
							_LOGGER.error( "Exception writing to internal frame buffer", e );
							onError( e );
						}
					}

					public void onError( java.lang.Exception e ) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						clear_all_faults_result result = new clear_all_faults_result();
						if( e instanceof org.apache.thrift.transport.TTransportException ) {
							_LOGGER.error( "TTransportException inside handler", e );
							fb.close();
							return;
						} else if( e instanceof org.apache.thrift.TApplicationException ) {
							_LOGGER.error( "TApplicationException inside handler", e );
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = ( org.apache.thrift.TApplicationException ) e;
						} else {
							_LOGGER.error( "Exception inside handler", e );
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException( org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage() );
						}
						try {
							fcall.sendResponse( fb, msg, msgType, seqid );
						} catch( java.lang.Exception ex ) {
							_LOGGER.error( "Exception writing to internal frame buffer", ex );
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start( I iface, clear_all_faults_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler ) throws org.apache.thrift.TException {
				iface.clear_all_faults( resultHandler );
			}
		}

		public static class clear_fault<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clear_fault_args, Void> {
			public clear_fault() {
				super( "clear_fault" );
			}

			public clear_fault_args getEmptyArgsInstance() {
				return new clear_fault_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler( final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid ) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
					public void onComplete( Void o ) {
						clear_fault_result result = new clear_fault_result();
						try {
							fcall.sendResponse( fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid );
						} catch( org.apache.thrift.transport.TTransportException e ) {
							_LOGGER.error( "TTransportException writing to internal frame buffer", e );
							fb.close();
						} catch( java.lang.Exception e ) {
							_LOGGER.error( "Exception writing to internal frame buffer", e );
							onError( e );
						}
					}

					public void onError( java.lang.Exception e ) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						clear_fault_result result = new clear_fault_result();
						if( e instanceof org.apache.thrift.transport.TTransportException ) {
							_LOGGER.error( "TTransportException inside handler", e );
							fb.close();
							return;
						} else if( e instanceof org.apache.thrift.TApplicationException ) {
							_LOGGER.error( "TApplicationException inside handler", e );
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = ( org.apache.thrift.TApplicationException ) e;
						} else {
							_LOGGER.error( "Exception inside handler", e );
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException( org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage() );
						}
						try {
							fcall.sendResponse( fb, msg, msgType, seqid );
						} catch( java.lang.Exception ex ) {
							_LOGGER.error( "Exception writing to internal frame buffer", ex );
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start( I iface, clear_fault_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler ) throws org.apache.thrift.TException {
				iface.clear_fault( args.method, resultHandler );
			}
		}

		public static class set_fault<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, set_fault_args, Void> {
			public set_fault() {
				super( "set_fault" );
			}

			public set_fault_args getEmptyArgsInstance() {
				return new set_fault_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler( final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid ) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
					public void onComplete( Void o ) {
						set_fault_result result = new set_fault_result();
						try {
							fcall.sendResponse( fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid );
						} catch( org.apache.thrift.transport.TTransportException e ) {
							_LOGGER.error( "TTransportException writing to internal frame buffer", e );
							fb.close();
						} catch( java.lang.Exception e ) {
							_LOGGER.error( "Exception writing to internal frame buffer", e );
							onError( e );
						}
					}

					public void onError( java.lang.Exception e ) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						set_fault_result result = new set_fault_result();
						if( e instanceof org.apache.thrift.transport.TTransportException ) {
							_LOGGER.error( "TTransportException inside handler", e );
							fb.close();
							return;
						} else if( e instanceof org.apache.thrift.TApplicationException ) {
							_LOGGER.error( "TApplicationException inside handler", e );
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = ( org.apache.thrift.TApplicationException ) e;
						} else {
							_LOGGER.error( "Exception inside handler", e );
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException( org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage() );
						}
						try {
							fcall.sendResponse( fb, msg, msgType, seqid );
						} catch( java.lang.Exception ex ) {
							_LOGGER.error( "Exception writing to internal frame buffer", ex );
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start( I iface, set_fault_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler ) throws org.apache.thrift.TException {
				iface.set_fault( args.methods, args.random, args.err_no, args.probability, args.regexp, args.kill_caller, args.delay_us, args.auto_delay, resultHandler );
			}
		}

		public static class set_all_fault<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, set_all_fault_args, Void> {
			public set_all_fault() {
				super( "set_all_fault" );
			}

			public set_all_fault_args getEmptyArgsInstance() {
				return new set_all_fault_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler( final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid ) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
					public void onComplete( Void o ) {
						set_all_fault_result result = new set_all_fault_result();
						try {
							fcall.sendResponse( fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid );
						} catch( org.apache.thrift.transport.TTransportException e ) {
							_LOGGER.error( "TTransportException writing to internal frame buffer", e );
							fb.close();
						} catch( java.lang.Exception e ) {
							_LOGGER.error( "Exception writing to internal frame buffer", e );
							onError( e );
						}
					}

					public void onError( java.lang.Exception e ) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						set_all_fault_result result = new set_all_fault_result();
						if( e instanceof org.apache.thrift.transport.TTransportException ) {
							_LOGGER.error( "TTransportException inside handler", e );
							fb.close();
							return;
						} else if( e instanceof org.apache.thrift.TApplicationException ) {
							_LOGGER.error( "TApplicationException inside handler", e );
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = ( org.apache.thrift.TApplicationException ) e;
						} else {
							_LOGGER.error( "Exception inside handler", e );
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException( org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage() );
						}
						try {
							fcall.sendResponse( fb, msg, msgType, seqid );
						} catch( java.lang.Exception ex ) {
							_LOGGER.error( "Exception writing to internal frame buffer", ex );
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start( I iface, set_all_fault_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler ) throws org.apache.thrift.TException {
				iface.set_all_fault( args.random, args.err_no, args.probability, args.regexp, args.kill_caller, args.delay_us, args.auto_delay, resultHandler );
			}
		}

	}

	public static class get_methods_args implements org.apache.thrift.TBase<get_methods_args, get_methods_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_methods_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "get_methods_args" );


		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new get_methods_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new get_methods_argsTupleSchemeFactory();


		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for( _Fields field : java.util.EnumSet.allOf( _Fields.class ) ) {
					byName.put( field.getFieldName(), field );
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId( int fieldId ) {
				switch( fieldId ) {
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow( int fieldId ) {
				_Fields fields = findByThriftId( fieldId );
				if( fields == null ) {
					throw new java.lang.IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
				}
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName( java.lang.String name ) {
				return byName.get( name );
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields( short thriftId, java.lang.String fieldName ) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>( _Fields.class );
			metaDataMap = java.util.Collections.unmodifiableMap( tmpMap );
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( get_methods_args.class, metaDataMap );
		}

		public get_methods_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public get_methods_args( get_methods_args other ) {
		}

		public get_methods_args deepCopy() {
			return new get_methods_args( this );
		}

		@Override
		public void clear() {
		}

		public void setFieldValue( _Fields field, java.lang.Object value ) {
			switch( field ) {
			}
		}

		public java.lang.Object getFieldValue( _Fields field ) {
			switch( field ) {
			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet( _Fields field ) {
			if( field == null ) {
				throw new java.lang.IllegalArgumentException();
			}

			switch( field ) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals( java.lang.Object that ) {
			if( that == null ) {
				return false;
			}
			if( that instanceof get_methods_args ) {
				return this.equals( ( get_methods_args ) that );
			}
			return false;
		}

		public boolean equals( get_methods_args that ) {
			if( that == null ) {
				return false;
			}
			if( this == that ) {
				return true;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo( get_methods_args other ) {
			if( !getClass().equals( other.getClass() ) ) {
				return getClass().getName().compareTo( other.getClass().getName() );
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId( int fieldId ) {
			return _Fields.findByThriftId( fieldId );
		}

		public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {
			scheme( iprot ).read( iprot, this );
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {
			scheme( oprot ).write( oprot, this );
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder( "get_methods_args(" );
			boolean first = true;

			sb.append( ")" );
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {
			try {
				write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private static class get_methods_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public get_methods_argsStandardScheme getScheme() {
				return new get_methods_argsStandardScheme();
			}
		}

		private static class get_methods_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<get_methods_args> {

			public void read( org.apache.thrift.protocol.TProtocol iprot, get_methods_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while( true ) {
					schemeField = iprot.readFieldBegin();
					if( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
						break;
					}
					switch( schemeField.id ) {
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write( org.apache.thrift.protocol.TProtocol oprot, get_methods_args struct ) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin( STRUCT_DESC );
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class get_methods_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public get_methods_argsTupleScheme getScheme() {
				return new get_methods_argsTupleScheme();
			}
		}

		private static class get_methods_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<get_methods_args> {

			@Override
			public void write( org.apache.thrift.protocol.TProtocol prot, get_methods_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
			}

			@Override
			public void read( org.apache.thrift.protocol.TProtocol prot, get_methods_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme( org.apache.thrift.protocol.TProtocol proto ) {
			return ( org.apache.thrift.scheme.StandardScheme.class.equals( proto.getScheme() ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ).getScheme();
		}
	}

	public static class get_methods_result implements org.apache.thrift.TBase<get_methods_result, get_methods_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_methods_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "get_methods_result" );

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField( "success", org.apache.thrift.protocol.TType.LIST, ( short ) 0 );

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new get_methods_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new get_methods_resultTupleSchemeFactory();

		public java.util.List<java.lang.String> success; // required

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS( ( short ) 0, "success" );

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for( _Fields field : java.util.EnumSet.allOf( _Fields.class ) ) {
					byName.put( field.getFieldName(), field );
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId( int fieldId ) {
				switch( fieldId ) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow( int fieldId ) {
				_Fields fields = findByThriftId( fieldId );
				if( fields == null ) {
					throw new java.lang.IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
				}
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName( java.lang.String name ) {
				return byName.get( name );
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields( short thriftId, java.lang.String fieldName ) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>( _Fields.class );
			tmpMap.put( _Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData( "success", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                            new org.apache.thrift.meta_data.ListMetaData( org.apache.thrift.protocol.TType.LIST,
			                                                                                                                          new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.STRING ) ) ) );
			metaDataMap = java.util.Collections.unmodifiableMap( tmpMap );
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( get_methods_result.class, metaDataMap );
		}

		public get_methods_result() {
		}

		public get_methods_result(
				java.util.List<java.lang.String> success ) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public get_methods_result( get_methods_result other ) {
			if( other.isSetSuccess() ) {
				java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>( other.success );
				this.success = __this__success;
			}
		}

		public get_methods_result deepCopy() {
			return new get_methods_result( this );
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return ( this.success == null ) ? 0 : this.success.size();
		}

		public java.util.Iterator<java.lang.String> getSuccessIterator() {
			return ( this.success == null ) ? null : this.success.iterator();
		}

		public void addToSuccess( java.lang.String elem ) {
			if( this.success == null ) {
				this.success = new java.util.ArrayList<java.lang.String>();
			}
			this.success.add( elem );
		}

		public java.util.List<java.lang.String> getSuccess() {
			return this.success;
		}

		public get_methods_result setSuccess( java.util.List<java.lang.String> success ) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet( boolean value ) {
			if( !value ) {
				this.success = null;
			}
		}

		public void setFieldValue( _Fields field, java.lang.Object value ) {
			switch( field ) {
				case SUCCESS:
					if( value == null ) {
						unsetSuccess();
					} else {
						setSuccess( ( java.util.List<java.lang.String> ) value );
					}
					break;

			}
		}

		public java.lang.Object getFieldValue( _Fields field ) {
			switch( field ) {
				case SUCCESS:
					return getSuccess();

			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet( _Fields field ) {
			if( field == null ) {
				throw new java.lang.IllegalArgumentException();
			}

			switch( field ) {
				case SUCCESS:
					return isSetSuccess();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals( java.lang.Object that ) {
			if( that == null ) {
				return false;
			}
			if( that instanceof get_methods_result ) {
				return this.equals( ( get_methods_result ) that );
			}
			return false;
		}

		public boolean equals( get_methods_result that ) {
			if( that == null ) {
				return false;
			}
			if( this == that ) {
				return true;
			}

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if( this_present_success || that_present_success ) {
				if( !( this_present_success && that_present_success ) ) {
					return false;
				}
				if( !this.success.equals( that.success ) ) {
					return false;
				}
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ( ( isSetSuccess() ) ? 131071 : 524287 );
			if( isSetSuccess() ) {
				hashCode = hashCode * 8191 + success.hashCode();
			}

			return hashCode;
		}

		@Override
		public int compareTo( get_methods_result other ) {
			if( !getClass().equals( other.getClass() ) ) {
				return getClass().getName().compareTo( other.getClass().getName() );
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf( isSetSuccess() ).compareTo( other.isSetSuccess() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetSuccess() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.success, other.success );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId( int fieldId ) {
			return _Fields.findByThriftId( fieldId );
		}

		public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {
			scheme( iprot ).read( iprot, this );
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {
			scheme( oprot ).write( oprot, this );
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder( "get_methods_result(" );
			boolean first = true;

			sb.append( "success:" );
			if( this.success == null ) {
				sb.append( "null" );
			} else {
				sb.append( this.success );
			}
			first = false;
			sb.append( ")" );
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {
			try {
				write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private static class get_methods_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public get_methods_resultStandardScheme getScheme() {
				return new get_methods_resultStandardScheme();
			}
		}

		private static class get_methods_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<get_methods_result> {

			public void read( org.apache.thrift.protocol.TProtocol iprot, get_methods_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while( true ) {
					schemeField = iprot.readFieldBegin();
					if( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
						break;
					}
					switch( schemeField.id ) {
						case 0: // SUCCESS
							if( schemeField.type == org.apache.thrift.protocol.TType.LIST ) {
								{
									org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
									struct.success = new java.util.ArrayList<java.lang.String>( _list0.size );
									java.lang.String _elem1;
									for( int _i2 = 0; _i2 < _list0.size; ++_i2 ) {
										_elem1 = iprot.readString();
										struct.success.add( _elem1 );
									}
									iprot.readListEnd();
								}
								struct.setSuccessIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write( org.apache.thrift.protocol.TProtocol oprot, get_methods_result struct ) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin( STRUCT_DESC );
				if( struct.success != null ) {
					oprot.writeFieldBegin( SUCCESS_FIELD_DESC );
					{
						oprot.writeListBegin( new org.apache.thrift.protocol.TList( org.apache.thrift.protocol.TType.STRING, struct.success.size() ) );
						for( java.lang.String _iter3 : struct.success ) {
							oprot.writeString( _iter3 );
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class get_methods_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public get_methods_resultTupleScheme getScheme() {
				return new get_methods_resultTupleScheme();
			}
		}

		private static class get_methods_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<get_methods_result> {

			@Override
			public void write( org.apache.thrift.protocol.TProtocol prot, get_methods_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if( struct.isSetSuccess() ) {
					optionals.set( 0 );
				}
				oprot.writeBitSet( optionals, 1 );
				if( struct.isSetSuccess() ) {
					{
						oprot.writeI32( struct.success.size() );
						for( java.lang.String _iter4 : struct.success ) {
							oprot.writeString( _iter4 );
						}
					}
				}
			}

			@Override
			public void read( org.apache.thrift.protocol.TProtocol prot, get_methods_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
				java.util.BitSet incoming = iprot.readBitSet( 1 );
				if( incoming.get( 0 ) ) {
					{
						org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList( org.apache.thrift.protocol.TType.STRING, iprot.readI32() );
						struct.success = new java.util.ArrayList<java.lang.String>( _list5.size );
						java.lang.String _elem6;
						for( int _i7 = 0; _i7 < _list5.size; ++_i7 ) {
							_elem6 = iprot.readString();
							struct.success.add( _elem6 );
						}
					}
					struct.setSuccessIsSet( true );
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme( org.apache.thrift.protocol.TProtocol proto ) {
			return ( org.apache.thrift.scheme.StandardScheme.class.equals( proto.getScheme() ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ).getScheme();
		}
	}

	public static class clear_all_faults_args implements org.apache.thrift.TBase<clear_all_faults_args, clear_all_faults_args._Fields>, java.io.Serializable, Cloneable, Comparable<clear_all_faults_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "clear_all_faults_args" );


		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new clear_all_faults_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new clear_all_faults_argsTupleSchemeFactory();


		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for( _Fields field : java.util.EnumSet.allOf( _Fields.class ) ) {
					byName.put( field.getFieldName(), field );
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId( int fieldId ) {
				switch( fieldId ) {
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow( int fieldId ) {
				_Fields fields = findByThriftId( fieldId );
				if( fields == null ) {
					throw new java.lang.IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
				}
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName( java.lang.String name ) {
				return byName.get( name );
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields( short thriftId, java.lang.String fieldName ) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>( _Fields.class );
			metaDataMap = java.util.Collections.unmodifiableMap( tmpMap );
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( clear_all_faults_args.class, metaDataMap );
		}

		public clear_all_faults_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public clear_all_faults_args( clear_all_faults_args other ) {
		}

		public clear_all_faults_args deepCopy() {
			return new clear_all_faults_args( this );
		}

		@Override
		public void clear() {
		}

		public void setFieldValue( _Fields field, java.lang.Object value ) {
			switch( field ) {
			}
		}

		public java.lang.Object getFieldValue( _Fields field ) {
			switch( field ) {
			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet( _Fields field ) {
			if( field == null ) {
				throw new java.lang.IllegalArgumentException();
			}

			switch( field ) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals( java.lang.Object that ) {
			if( that == null ) {
				return false;
			}
			if( that instanceof clear_all_faults_args ) {
				return this.equals( ( clear_all_faults_args ) that );
			}
			return false;
		}

		public boolean equals( clear_all_faults_args that ) {
			if( that == null ) {
				return false;
			}
			if( this == that ) {
				return true;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo( clear_all_faults_args other ) {
			if( !getClass().equals( other.getClass() ) ) {
				return getClass().getName().compareTo( other.getClass().getName() );
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId( int fieldId ) {
			return _Fields.findByThriftId( fieldId );
		}

		public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {
			scheme( iprot ).read( iprot, this );
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {
			scheme( oprot ).write( oprot, this );
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder( "clear_all_faults_args(" );
			boolean first = true;

			sb.append( ")" );
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {
			try {
				write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private static class clear_all_faults_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public clear_all_faults_argsStandardScheme getScheme() {
				return new clear_all_faults_argsStandardScheme();
			}
		}

		private static class clear_all_faults_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<clear_all_faults_args> {

			public void read( org.apache.thrift.protocol.TProtocol iprot, clear_all_faults_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while( true ) {
					schemeField = iprot.readFieldBegin();
					if( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
						break;
					}
					switch( schemeField.id ) {
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write( org.apache.thrift.protocol.TProtocol oprot, clear_all_faults_args struct ) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin( STRUCT_DESC );
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class clear_all_faults_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public clear_all_faults_argsTupleScheme getScheme() {
				return new clear_all_faults_argsTupleScheme();
			}
		}

		private static class clear_all_faults_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<clear_all_faults_args> {

			@Override
			public void write( org.apache.thrift.protocol.TProtocol prot, clear_all_faults_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
			}

			@Override
			public void read( org.apache.thrift.protocol.TProtocol prot, clear_all_faults_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme( org.apache.thrift.protocol.TProtocol proto ) {
			return ( org.apache.thrift.scheme.StandardScheme.class.equals( proto.getScheme() ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ).getScheme();
		}
	}

	public static class clear_all_faults_result implements org.apache.thrift.TBase<clear_all_faults_result, clear_all_faults_result._Fields>, java.io.Serializable, Cloneable, Comparable<clear_all_faults_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "clear_all_faults_result" );


		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new clear_all_faults_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new clear_all_faults_resultTupleSchemeFactory();


		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for( _Fields field : java.util.EnumSet.allOf( _Fields.class ) ) {
					byName.put( field.getFieldName(), field );
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId( int fieldId ) {
				switch( fieldId ) {
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow( int fieldId ) {
				_Fields fields = findByThriftId( fieldId );
				if( fields == null ) {
					throw new java.lang.IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
				}
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName( java.lang.String name ) {
				return byName.get( name );
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields( short thriftId, java.lang.String fieldName ) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>( _Fields.class );
			metaDataMap = java.util.Collections.unmodifiableMap( tmpMap );
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( clear_all_faults_result.class, metaDataMap );
		}

		public clear_all_faults_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public clear_all_faults_result( clear_all_faults_result other ) {
		}

		public clear_all_faults_result deepCopy() {
			return new clear_all_faults_result( this );
		}

		@Override
		public void clear() {
		}

		public void setFieldValue( _Fields field, java.lang.Object value ) {
			switch( field ) {
			}
		}

		public java.lang.Object getFieldValue( _Fields field ) {
			switch( field ) {
			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet( _Fields field ) {
			if( field == null ) {
				throw new java.lang.IllegalArgumentException();
			}

			switch( field ) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals( java.lang.Object that ) {
			if( that == null ) {
				return false;
			}
			if( that instanceof clear_all_faults_result ) {
				return this.equals( ( clear_all_faults_result ) that );
			}
			return false;
		}

		public boolean equals( clear_all_faults_result that ) {
			if( that == null ) {
				return false;
			}
			if( this == that ) {
				return true;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo( clear_all_faults_result other ) {
			if( !getClass().equals( other.getClass() ) ) {
				return getClass().getName().compareTo( other.getClass().getName() );
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId( int fieldId ) {
			return _Fields.findByThriftId( fieldId );
		}

		public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {
			scheme( iprot ).read( iprot, this );
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {
			scheme( oprot ).write( oprot, this );
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder( "clear_all_faults_result(" );
			boolean first = true;

			sb.append( ")" );
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {
			try {
				write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private static class clear_all_faults_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public clear_all_faults_resultStandardScheme getScheme() {
				return new clear_all_faults_resultStandardScheme();
			}
		}

		private static class clear_all_faults_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<clear_all_faults_result> {

			public void read( org.apache.thrift.protocol.TProtocol iprot, clear_all_faults_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while( true ) {
					schemeField = iprot.readFieldBegin();
					if( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
						break;
					}
					switch( schemeField.id ) {
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write( org.apache.thrift.protocol.TProtocol oprot, clear_all_faults_result struct ) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin( STRUCT_DESC );
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class clear_all_faults_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public clear_all_faults_resultTupleScheme getScheme() {
				return new clear_all_faults_resultTupleScheme();
			}
		}

		private static class clear_all_faults_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<clear_all_faults_result> {

			@Override
			public void write( org.apache.thrift.protocol.TProtocol prot, clear_all_faults_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
			}

			@Override
			public void read( org.apache.thrift.protocol.TProtocol prot, clear_all_faults_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme( org.apache.thrift.protocol.TProtocol proto ) {
			return ( org.apache.thrift.scheme.StandardScheme.class.equals( proto.getScheme() ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ).getScheme();
		}
	}

	public static class clear_fault_args implements org.apache.thrift.TBase<clear_fault_args, clear_fault_args._Fields>, java.io.Serializable, Cloneable, Comparable<clear_fault_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "clear_fault_args" );

		private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField( "method", org.apache.thrift.protocol.TType.STRING, ( short ) 1 );

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new clear_fault_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new clear_fault_argsTupleSchemeFactory();

		public java.lang.String method; // required

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			METHOD( ( short ) 1, "method" );

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for( _Fields field : java.util.EnumSet.allOf( _Fields.class ) ) {
					byName.put( field.getFieldName(), field );
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId( int fieldId ) {
				switch( fieldId ) {
					case 1: // METHOD
						return METHOD;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow( int fieldId ) {
				_Fields fields = findByThriftId( fieldId );
				if( fields == null ) {
					throw new java.lang.IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
				}
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName( java.lang.String name ) {
				return byName.get( name );
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields( short thriftId, java.lang.String fieldName ) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>( _Fields.class );
			tmpMap.put( _Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData( "method", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                           new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.STRING ) ) );
			metaDataMap = java.util.Collections.unmodifiableMap( tmpMap );
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( clear_fault_args.class, metaDataMap );
		}

		public clear_fault_args() {
		}

		public clear_fault_args(
				java.lang.String method ) {
			this();
			this.method = method;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public clear_fault_args( clear_fault_args other ) {
			if( other.isSetMethod() ) {
				this.method = other.method;
			}
		}

		public clear_fault_args deepCopy() {
			return new clear_fault_args( this );
		}

		@Override
		public void clear() {
			this.method = null;
		}

		public java.lang.String getMethod() {
			return this.method;
		}

		public clear_fault_args setMethod( java.lang.String method ) {
			this.method = method;
			return this;
		}

		public void unsetMethod() {
			this.method = null;
		}

		/** Returns true if field method is set (has been assigned a value) and false otherwise */
		public boolean isSetMethod() {
			return this.method != null;
		}

		public void setMethodIsSet( boolean value ) {
			if( !value ) {
				this.method = null;
			}
		}

		public void setFieldValue( _Fields field, java.lang.Object value ) {
			switch( field ) {
				case METHOD:
					if( value == null ) {
						unsetMethod();
					} else {
						setMethod( ( java.lang.String ) value );
					}
					break;

			}
		}

		public java.lang.Object getFieldValue( _Fields field ) {
			switch( field ) {
				case METHOD:
					return getMethod();

			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet( _Fields field ) {
			if( field == null ) {
				throw new java.lang.IllegalArgumentException();
			}

			switch( field ) {
				case METHOD:
					return isSetMethod();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals( java.lang.Object that ) {
			if( that == null ) {
				return false;
			}
			if( that instanceof clear_fault_args ) {
				return this.equals( ( clear_fault_args ) that );
			}
			return false;
		}

		public boolean equals( clear_fault_args that ) {
			if( that == null ) {
				return false;
			}
			if( this == that ) {
				return true;
			}

			boolean this_present_method = true && this.isSetMethod();
			boolean that_present_method = true && that.isSetMethod();
			if( this_present_method || that_present_method ) {
				if( !( this_present_method && that_present_method ) ) {
					return false;
				}
				if( !this.method.equals( that.method ) ) {
					return false;
				}
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ( ( isSetMethod() ) ? 131071 : 524287 );
			if( isSetMethod() ) {
				hashCode = hashCode * 8191 + method.hashCode();
			}

			return hashCode;
		}

		@Override
		public int compareTo( clear_fault_args other ) {
			if( !getClass().equals( other.getClass() ) ) {
				return getClass().getName().compareTo( other.getClass().getName() );
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf( isSetMethod() ).compareTo( other.isSetMethod() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetMethod() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.method, other.method );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId( int fieldId ) {
			return _Fields.findByThriftId( fieldId );
		}

		public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {
			scheme( iprot ).read( iprot, this );
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {
			scheme( oprot ).write( oprot, this );
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder( "clear_fault_args(" );
			boolean first = true;

			sb.append( "method:" );
			if( this.method == null ) {
				sb.append( "null" );
			} else {
				sb.append( this.method );
			}
			first = false;
			sb.append( ")" );
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {
			try {
				write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private static class clear_fault_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public clear_fault_argsStandardScheme getScheme() {
				return new clear_fault_argsStandardScheme();
			}
		}

		private static class clear_fault_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<clear_fault_args> {

			public void read( org.apache.thrift.protocol.TProtocol iprot, clear_fault_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while( true ) {
					schemeField = iprot.readFieldBegin();
					if( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
						break;
					}
					switch( schemeField.id ) {
						case 1: // METHOD
							if( schemeField.type == org.apache.thrift.protocol.TType.STRING ) {
								struct.method = iprot.readString();
								struct.setMethodIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write( org.apache.thrift.protocol.TProtocol oprot, clear_fault_args struct ) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin( STRUCT_DESC );
				if( struct.method != null ) {
					oprot.writeFieldBegin( METHOD_FIELD_DESC );
					oprot.writeString( struct.method );
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class clear_fault_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public clear_fault_argsTupleScheme getScheme() {
				return new clear_fault_argsTupleScheme();
			}
		}

		private static class clear_fault_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<clear_fault_args> {

			@Override
			public void write( org.apache.thrift.protocol.TProtocol prot, clear_fault_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if( struct.isSetMethod() ) {
					optionals.set( 0 );
				}
				oprot.writeBitSet( optionals, 1 );
				if( struct.isSetMethod() ) {
					oprot.writeString( struct.method );
				}
			}

			@Override
			public void read( org.apache.thrift.protocol.TProtocol prot, clear_fault_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
				java.util.BitSet incoming = iprot.readBitSet( 1 );
				if( incoming.get( 0 ) ) {
					struct.method = iprot.readString();
					struct.setMethodIsSet( true );
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme( org.apache.thrift.protocol.TProtocol proto ) {
			return ( org.apache.thrift.scheme.StandardScheme.class.equals( proto.getScheme() ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ).getScheme();
		}
	}

	public static class clear_fault_result implements org.apache.thrift.TBase<clear_fault_result, clear_fault_result._Fields>, java.io.Serializable, Cloneable, Comparable<clear_fault_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "clear_fault_result" );


		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new clear_fault_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new clear_fault_resultTupleSchemeFactory();


		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for( _Fields field : java.util.EnumSet.allOf( _Fields.class ) ) {
					byName.put( field.getFieldName(), field );
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId( int fieldId ) {
				switch( fieldId ) {
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow( int fieldId ) {
				_Fields fields = findByThriftId( fieldId );
				if( fields == null ) {
					throw new java.lang.IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
				}
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName( java.lang.String name ) {
				return byName.get( name );
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields( short thriftId, java.lang.String fieldName ) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>( _Fields.class );
			metaDataMap = java.util.Collections.unmodifiableMap( tmpMap );
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( clear_fault_result.class, metaDataMap );
		}

		public clear_fault_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public clear_fault_result( clear_fault_result other ) {
		}

		public clear_fault_result deepCopy() {
			return new clear_fault_result( this );
		}

		@Override
		public void clear() {
		}

		public void setFieldValue( _Fields field, java.lang.Object value ) {
			switch( field ) {
			}
		}

		public java.lang.Object getFieldValue( _Fields field ) {
			switch( field ) {
			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet( _Fields field ) {
			if( field == null ) {
				throw new java.lang.IllegalArgumentException();
			}

			switch( field ) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals( java.lang.Object that ) {
			if( that == null ) {
				return false;
			}
			if( that instanceof clear_fault_result ) {
				return this.equals( ( clear_fault_result ) that );
			}
			return false;
		}

		public boolean equals( clear_fault_result that ) {
			if( that == null ) {
				return false;
			}
			if( this == that ) {
				return true;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo( clear_fault_result other ) {
			if( !getClass().equals( other.getClass() ) ) {
				return getClass().getName().compareTo( other.getClass().getName() );
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId( int fieldId ) {
			return _Fields.findByThriftId( fieldId );
		}

		public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {
			scheme( iprot ).read( iprot, this );
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {
			scheme( oprot ).write( oprot, this );
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder( "clear_fault_result(" );
			boolean first = true;

			sb.append( ")" );
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {
			try {
				write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private static class clear_fault_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public clear_fault_resultStandardScheme getScheme() {
				return new clear_fault_resultStandardScheme();
			}
		}

		private static class clear_fault_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<clear_fault_result> {

			public void read( org.apache.thrift.protocol.TProtocol iprot, clear_fault_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while( true ) {
					schemeField = iprot.readFieldBegin();
					if( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
						break;
					}
					switch( schemeField.id ) {
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write( org.apache.thrift.protocol.TProtocol oprot, clear_fault_result struct ) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin( STRUCT_DESC );
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class clear_fault_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public clear_fault_resultTupleScheme getScheme() {
				return new clear_fault_resultTupleScheme();
			}
		}

		private static class clear_fault_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<clear_fault_result> {

			@Override
			public void write( org.apache.thrift.protocol.TProtocol prot, clear_fault_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
			}

			@Override
			public void read( org.apache.thrift.protocol.TProtocol prot, clear_fault_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme( org.apache.thrift.protocol.TProtocol proto ) {
			return ( org.apache.thrift.scheme.StandardScheme.class.equals( proto.getScheme() ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ).getScheme();
		}
	}

	public static class set_fault_args implements org.apache.thrift.TBase<set_fault_args, set_fault_args._Fields>, java.io.Serializable, Cloneable, Comparable<set_fault_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "set_fault_args" );

		private static final org.apache.thrift.protocol.TField METHODS_FIELD_DESC = new org.apache.thrift.protocol.TField( "methods", org.apache.thrift.protocol.TType.LIST, ( short ) 1 );
		private static final org.apache.thrift.protocol.TField RANDOM_FIELD_DESC = new org.apache.thrift.protocol.TField( "random", org.apache.thrift.protocol.TType.BOOL, ( short ) 2 );
		private static final org.apache.thrift.protocol.TField ERR_NO_FIELD_DESC = new org.apache.thrift.protocol.TField( "err_no", org.apache.thrift.protocol.TType.I32, ( short ) 3 );
		private static final org.apache.thrift.protocol.TField PROBABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField( "probability", org.apache.thrift.protocol.TType.I32, ( short ) 4 );
		private static final org.apache.thrift.protocol.TField REGEXP_FIELD_DESC = new org.apache.thrift.protocol.TField( "regexp", org.apache.thrift.protocol.TType.STRING, ( short ) 5 );
		private static final org.apache.thrift.protocol.TField KILL_CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField( "kill_caller", org.apache.thrift.protocol.TType.BOOL, ( short ) 6 );
		private static final org.apache.thrift.protocol.TField DELAY_US_FIELD_DESC = new org.apache.thrift.protocol.TField( "delay_us", org.apache.thrift.protocol.TType.I32, ( short ) 7 );
		private static final org.apache.thrift.protocol.TField AUTO_DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField( "auto_delay", org.apache.thrift.protocol.TType.BOOL, ( short ) 8 );

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new set_fault_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new set_fault_argsTupleSchemeFactory();

		public java.util.List<java.lang.String> methods; // required
		public boolean random; // required
		public int err_no; // required
		public int probability; // required
		public java.lang.String regexp; // required
		public boolean kill_caller; // required
		public int delay_us; // required
		public boolean auto_delay; // required

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			METHODS( ( short ) 1, "methods" ),
			RANDOM( ( short ) 2, "random" ),
			ERR_NO( ( short ) 3, "err_no" ),
			PROBABILITY( ( short ) 4, "probability" ),
			REGEXP( ( short ) 5, "regexp" ),
			KILL_CALLER( ( short ) 6, "kill_caller" ),
			DELAY_US( ( short ) 7, "delay_us" ),
			AUTO_DELAY( ( short ) 8, "auto_delay" );

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for( _Fields field : java.util.EnumSet.allOf( _Fields.class ) ) {
					byName.put( field.getFieldName(), field );
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId( int fieldId ) {
				switch( fieldId ) {
					case 1: // METHODS
						return METHODS;
					case 2: // RANDOM
						return RANDOM;
					case 3: // ERR_NO
						return ERR_NO;
					case 4: // PROBABILITY
						return PROBABILITY;
					case 5: // REGEXP
						return REGEXP;
					case 6: // KILL_CALLER
						return KILL_CALLER;
					case 7: // DELAY_US
						return DELAY_US;
					case 8: // AUTO_DELAY
						return AUTO_DELAY;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow( int fieldId ) {
				_Fields fields = findByThriftId( fieldId );
				if( fields == null ) {
					throw new java.lang.IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
				}
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName( java.lang.String name ) {
				return byName.get( name );
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields( short thriftId, java.lang.String fieldName ) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __RANDOM_ISSET_ID = 0;
		private static final int __ERR_NO_ISSET_ID = 1;
		private static final int __PROBABILITY_ISSET_ID = 2;
		private static final int __KILL_CALLER_ISSET_ID = 3;
		private static final int __DELAY_US_ISSET_ID = 4;
		private static final int __AUTO_DELAY_ISSET_ID = 5;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>( _Fields.class );
			tmpMap.put( _Fields.METHODS, new org.apache.thrift.meta_data.FieldMetaData( "methods", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                            new org.apache.thrift.meta_data.ListMetaData( org.apache.thrift.protocol.TType.LIST,
			                                                                                                                          new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.STRING ) ) ) );
			tmpMap.put( _Fields.RANDOM, new org.apache.thrift.meta_data.FieldMetaData( "random", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                           new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.BOOL ) ) );
			tmpMap.put( _Fields.ERR_NO, new org.apache.thrift.meta_data.FieldMetaData( "err_no", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                           new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.I32 ) ) );
			tmpMap.put( _Fields.PROBABILITY, new org.apache.thrift.meta_data.FieldMetaData( "probability", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                                new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.I32 ) ) );
			tmpMap.put( _Fields.REGEXP, new org.apache.thrift.meta_data.FieldMetaData( "regexp", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                           new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.STRING ) ) );
			tmpMap.put( _Fields.KILL_CALLER, new org.apache.thrift.meta_data.FieldMetaData( "kill_caller", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                                new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.BOOL ) ) );
			tmpMap.put( _Fields.DELAY_US, new org.apache.thrift.meta_data.FieldMetaData( "delay_us", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                             new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.I32 ) ) );
			tmpMap.put( _Fields.AUTO_DELAY, new org.apache.thrift.meta_data.FieldMetaData( "auto_delay", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                               new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.BOOL ) ) );
			metaDataMap = java.util.Collections.unmodifiableMap( tmpMap );
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( set_fault_args.class, metaDataMap );
		}

		public set_fault_args() {
		}

		public set_fault_args(
				java.util.List<java.lang.String> methods,
				boolean random,
				int err_no,
				int probability,
				java.lang.String regexp,
				boolean kill_caller,
				int delay_us,
				boolean auto_delay ) {
			this();
			this.methods = methods;
			this.random = random;
			setRandomIsSet( true );
			this.err_no = err_no;
			setErr_noIsSet( true );
			this.probability = probability;
			setProbabilityIsSet( true );
			this.regexp = regexp;
			this.kill_caller = kill_caller;
			setKill_callerIsSet( true );
			this.delay_us = delay_us;
			setDelay_usIsSet( true );
			this.auto_delay = auto_delay;
			setAuto_delayIsSet( true );
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public set_fault_args( set_fault_args other ) {
			__isset_bitfield = other.__isset_bitfield;
			if( other.isSetMethods() ) {
				java.util.List<java.lang.String> __this__methods = new java.util.ArrayList<java.lang.String>( other.methods );
				this.methods = __this__methods;
			}
			this.random = other.random;
			this.err_no = other.err_no;
			this.probability = other.probability;
			if( other.isSetRegexp() ) {
				this.regexp = other.regexp;
			}
			this.kill_caller = other.kill_caller;
			this.delay_us = other.delay_us;
			this.auto_delay = other.auto_delay;
		}

		public set_fault_args deepCopy() {
			return new set_fault_args( this );
		}

		@Override
		public void clear() {
			this.methods = null;
			setRandomIsSet( false );
			this.random = false;
			setErr_noIsSet( false );
			this.err_no = 0;
			setProbabilityIsSet( false );
			this.probability = 0;
			this.regexp = null;
			setKill_callerIsSet( false );
			this.kill_caller = false;
			setDelay_usIsSet( false );
			this.delay_us = 0;
			setAuto_delayIsSet( false );
			this.auto_delay = false;
		}

		public int getMethodsSize() {
			return ( this.methods == null ) ? 0 : this.methods.size();
		}

		public java.util.Iterator<java.lang.String> getMethodsIterator() {
			return ( this.methods == null ) ? null : this.methods.iterator();
		}

		public void addToMethods( java.lang.String elem ) {
			if( this.methods == null ) {
				this.methods = new java.util.ArrayList<java.lang.String>();
			}
			this.methods.add( elem );
		}

		public java.util.List<java.lang.String> getMethods() {
			return this.methods;
		}

		public set_fault_args setMethods( java.util.List<java.lang.String> methods ) {
			this.methods = methods;
			return this;
		}

		public void unsetMethods() {
			this.methods = null;
		}

		/** Returns true if field methods is set (has been assigned a value) and false otherwise */
		public boolean isSetMethods() {
			return this.methods != null;
		}

		public void setMethodsIsSet( boolean value ) {
			if( !value ) {
				this.methods = null;
			}
		}

		public boolean isRandom() {
			return this.random;
		}

		public set_fault_args setRandom( boolean random ) {
			this.random = random;
			setRandomIsSet( true );
			return this;
		}

		public void unsetRandom() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit( __isset_bitfield, __RANDOM_ISSET_ID );
		}

		/** Returns true if field random is set (has been assigned a value) and false otherwise */
		public boolean isSetRandom() {
			return org.apache.thrift.EncodingUtils.testBit( __isset_bitfield, __RANDOM_ISSET_ID );
		}

		public void setRandomIsSet( boolean value ) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit( __isset_bitfield, __RANDOM_ISSET_ID, value );
		}

		public int getErr_no() {
			return this.err_no;
		}

		public set_fault_args setErr_no( int err_no ) {
			this.err_no = err_no;
			setErr_noIsSet( true );
			return this;
		}

		public void unsetErr_no() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit( __isset_bitfield, __ERR_NO_ISSET_ID );
		}

		/** Returns true if field err_no is set (has been assigned a value) and false otherwise */
		public boolean isSetErr_no() {
			return org.apache.thrift.EncodingUtils.testBit( __isset_bitfield, __ERR_NO_ISSET_ID );
		}

		public void setErr_noIsSet( boolean value ) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit( __isset_bitfield, __ERR_NO_ISSET_ID, value );
		}

		public int getProbability() {
			return this.probability;
		}

		public set_fault_args setProbability( int probability ) {
			this.probability = probability;
			setProbabilityIsSet( true );
			return this;
		}

		public void unsetProbability() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit( __isset_bitfield, __PROBABILITY_ISSET_ID );
		}

		/** Returns true if field probability is set (has been assigned a value) and false otherwise */
		public boolean isSetProbability() {
			return org.apache.thrift.EncodingUtils.testBit( __isset_bitfield, __PROBABILITY_ISSET_ID );
		}

		public void setProbabilityIsSet( boolean value ) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit( __isset_bitfield, __PROBABILITY_ISSET_ID, value );
		}

		public java.lang.String getRegexp() {
			return this.regexp;
		}

		public set_fault_args setRegexp( java.lang.String regexp ) {
			this.regexp = regexp;
			return this;
		}

		public void unsetRegexp() {
			this.regexp = null;
		}

		/** Returns true if field regexp is set (has been assigned a value) and false otherwise */
		public boolean isSetRegexp() {
			return this.regexp != null;
		}

		public void setRegexpIsSet( boolean value ) {
			if( !value ) {
				this.regexp = null;
			}
		}

		public boolean isKill_caller() {
			return this.kill_caller;
		}

		public set_fault_args setKill_caller( boolean kill_caller ) {
			this.kill_caller = kill_caller;
			setKill_callerIsSet( true );
			return this;
		}

		public void unsetKill_caller() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit( __isset_bitfield, __KILL_CALLER_ISSET_ID );
		}

		/** Returns true if field kill_caller is set (has been assigned a value) and false otherwise */
		public boolean isSetKill_caller() {
			return org.apache.thrift.EncodingUtils.testBit( __isset_bitfield, __KILL_CALLER_ISSET_ID );
		}

		public void setKill_callerIsSet( boolean value ) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit( __isset_bitfield, __KILL_CALLER_ISSET_ID, value );
		}

		public int getDelay_us() {
			return this.delay_us;
		}

		public set_fault_args setDelay_us( int delay_us ) {
			this.delay_us = delay_us;
			setDelay_usIsSet( true );
			return this;
		}

		public void unsetDelay_us() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit( __isset_bitfield, __DELAY_US_ISSET_ID );
		}

		/** Returns true if field delay_us is set (has been assigned a value) and false otherwise */
		public boolean isSetDelay_us() {
			return org.apache.thrift.EncodingUtils.testBit( __isset_bitfield, __DELAY_US_ISSET_ID );
		}

		public void setDelay_usIsSet( boolean value ) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit( __isset_bitfield, __DELAY_US_ISSET_ID, value );
		}

		public boolean isAuto_delay() {
			return this.auto_delay;
		}

		public set_fault_args setAuto_delay( boolean auto_delay ) {
			this.auto_delay = auto_delay;
			setAuto_delayIsSet( true );
			return this;
		}

		public void unsetAuto_delay() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit( __isset_bitfield, __AUTO_DELAY_ISSET_ID );
		}

		/** Returns true if field auto_delay is set (has been assigned a value) and false otherwise */
		public boolean isSetAuto_delay() {
			return org.apache.thrift.EncodingUtils.testBit( __isset_bitfield, __AUTO_DELAY_ISSET_ID );
		}

		public void setAuto_delayIsSet( boolean value ) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit( __isset_bitfield, __AUTO_DELAY_ISSET_ID, value );
		}

		public void setFieldValue( _Fields field, java.lang.Object value ) {
			switch( field ) {
				case METHODS:
					if( value == null ) {
						unsetMethods();
					} else {
						setMethods( ( java.util.List<java.lang.String> ) value );
					}
					break;

				case RANDOM:
					if( value == null ) {
						unsetRandom();
					} else {
						setRandom( ( java.lang.Boolean ) value );
					}
					break;

				case ERR_NO:
					if( value == null ) {
						unsetErr_no();
					} else {
						setErr_no( ( java.lang.Integer ) value );
					}
					break;

				case PROBABILITY:
					if( value == null ) {
						unsetProbability();
					} else {
						setProbability( ( java.lang.Integer ) value );
					}
					break;

				case REGEXP:
					if( value == null ) {
						unsetRegexp();
					} else {
						setRegexp( ( java.lang.String ) value );
					}
					break;

				case KILL_CALLER:
					if( value == null ) {
						unsetKill_caller();
					} else {
						setKill_caller( ( java.lang.Boolean ) value );
					}
					break;

				case DELAY_US:
					if( value == null ) {
						unsetDelay_us();
					} else {
						setDelay_us( ( java.lang.Integer ) value );
					}
					break;

				case AUTO_DELAY:
					if( value == null ) {
						unsetAuto_delay();
					} else {
						setAuto_delay( ( java.lang.Boolean ) value );
					}
					break;

			}
		}

		public java.lang.Object getFieldValue( _Fields field ) {
			switch( field ) {
				case METHODS:
					return getMethods();

				case RANDOM:
					return isRandom();

				case ERR_NO:
					return getErr_no();

				case PROBABILITY:
					return getProbability();

				case REGEXP:
					return getRegexp();

				case KILL_CALLER:
					return isKill_caller();

				case DELAY_US:
					return getDelay_us();

				case AUTO_DELAY:
					return isAuto_delay();

			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet( _Fields field ) {
			if( field == null ) {
				throw new java.lang.IllegalArgumentException();
			}

			switch( field ) {
				case METHODS:
					return isSetMethods();
				case RANDOM:
					return isSetRandom();
				case ERR_NO:
					return isSetErr_no();
				case PROBABILITY:
					return isSetProbability();
				case REGEXP:
					return isSetRegexp();
				case KILL_CALLER:
					return isSetKill_caller();
				case DELAY_US:
					return isSetDelay_us();
				case AUTO_DELAY:
					return isSetAuto_delay();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals( java.lang.Object that ) {
			if( that == null ) {
				return false;
			}
			if( that instanceof set_fault_args ) {
				return this.equals( ( set_fault_args ) that );
			}
			return false;
		}

		public boolean equals( set_fault_args that ) {
			if( that == null ) {
				return false;
			}
			if( this == that ) {
				return true;
			}

			boolean this_present_methods = true && this.isSetMethods();
			boolean that_present_methods = true && that.isSetMethods();
			if( this_present_methods || that_present_methods ) {
				if( !( this_present_methods && that_present_methods ) ) {
					return false;
				}
				if( !this.methods.equals( that.methods ) ) {
					return false;
				}
			}

			boolean this_present_random = true;
			boolean that_present_random = true;
			if( this_present_random || that_present_random ) {
				if( !( this_present_random && that_present_random ) ) {
					return false;
				}
				if( this.random != that.random ) {
					return false;
				}
			}

			boolean this_present_err_no = true;
			boolean that_present_err_no = true;
			if( this_present_err_no || that_present_err_no ) {
				if( !( this_present_err_no && that_present_err_no ) ) {
					return false;
				}
				if( this.err_no != that.err_no ) {
					return false;
				}
			}

			boolean this_present_probability = true;
			boolean that_present_probability = true;
			if( this_present_probability || that_present_probability ) {
				if( !( this_present_probability && that_present_probability ) ) {
					return false;
				}
				if( this.probability != that.probability ) {
					return false;
				}
			}

			boolean this_present_regexp = true && this.isSetRegexp();
			boolean that_present_regexp = true && that.isSetRegexp();
			if( this_present_regexp || that_present_regexp ) {
				if( !( this_present_regexp && that_present_regexp ) ) {
					return false;
				}
				if( !this.regexp.equals( that.regexp ) ) {
					return false;
				}
			}

			boolean this_present_kill_caller = true;
			boolean that_present_kill_caller = true;
			if( this_present_kill_caller || that_present_kill_caller ) {
				if( !( this_present_kill_caller && that_present_kill_caller ) ) {
					return false;
				}
				if( this.kill_caller != that.kill_caller ) {
					return false;
				}
			}

			boolean this_present_delay_us = true;
			boolean that_present_delay_us = true;
			if( this_present_delay_us || that_present_delay_us ) {
				if( !( this_present_delay_us && that_present_delay_us ) ) {
					return false;
				}
				if( this.delay_us != that.delay_us ) {
					return false;
				}
			}

			boolean this_present_auto_delay = true;
			boolean that_present_auto_delay = true;
			if( this_present_auto_delay || that_present_auto_delay ) {
				if( !( this_present_auto_delay && that_present_auto_delay ) ) {
					return false;
				}
				if( this.auto_delay != that.auto_delay ) {
					return false;
				}
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ( ( isSetMethods() ) ? 131071 : 524287 );
			if( isSetMethods() ) {
				hashCode = hashCode * 8191 + methods.hashCode();
			}

			hashCode = hashCode * 8191 + ( ( random ) ? 131071 : 524287 );

			hashCode = hashCode * 8191 + err_no;

			hashCode = hashCode * 8191 + probability;

			hashCode = hashCode * 8191 + ( ( isSetRegexp() ) ? 131071 : 524287 );
			if( isSetRegexp() ) {
				hashCode = hashCode * 8191 + regexp.hashCode();
			}

			hashCode = hashCode * 8191 + ( ( kill_caller ) ? 131071 : 524287 );

			hashCode = hashCode * 8191 + delay_us;

			hashCode = hashCode * 8191 + ( ( auto_delay ) ? 131071 : 524287 );

			return hashCode;
		}

		@Override
		public int compareTo( set_fault_args other ) {
			if( !getClass().equals( other.getClass() ) ) {
				return getClass().getName().compareTo( other.getClass().getName() );
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf( isSetMethods() ).compareTo( other.isSetMethods() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetMethods() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.methods, other.methods );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetRandom() ).compareTo( other.isSetRandom() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetRandom() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.random, other.random );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetErr_no() ).compareTo( other.isSetErr_no() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetErr_no() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.err_no, other.err_no );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetProbability() ).compareTo( other.isSetProbability() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetProbability() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.probability, other.probability );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetRegexp() ).compareTo( other.isSetRegexp() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetRegexp() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.regexp, other.regexp );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetKill_caller() ).compareTo( other.isSetKill_caller() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetKill_caller() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.kill_caller, other.kill_caller );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetDelay_us() ).compareTo( other.isSetDelay_us() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetDelay_us() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.delay_us, other.delay_us );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetAuto_delay() ).compareTo( other.isSetAuto_delay() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetAuto_delay() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.auto_delay, other.auto_delay );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId( int fieldId ) {
			return _Fields.findByThriftId( fieldId );
		}

		public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {
			scheme( iprot ).read( iprot, this );
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {
			scheme( oprot ).write( oprot, this );
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder( "set_fault_args(" );
			boolean first = true;

			sb.append( "methods:" );
			if( this.methods == null ) {
				sb.append( "null" );
			} else {
				sb.append( this.methods );
			}
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "random:" );
			sb.append( this.random );
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "err_no:" );
			sb.append( this.err_no );
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "probability:" );
			sb.append( this.probability );
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "regexp:" );
			if( this.regexp == null ) {
				sb.append( "null" );
			} else {
				sb.append( this.regexp );
			}
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "kill_caller:" );
			sb.append( this.kill_caller );
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "delay_us:" );
			sb.append( this.delay_us );
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "auto_delay:" );
			sb.append( this.auto_delay );
			first = false;
			sb.append( ")" );
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {
			try {
				write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private static class set_fault_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public set_fault_argsStandardScheme getScheme() {
				return new set_fault_argsStandardScheme();
			}
		}

		private static class set_fault_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<set_fault_args> {

			public void read( org.apache.thrift.protocol.TProtocol iprot, set_fault_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while( true ) {
					schemeField = iprot.readFieldBegin();
					if( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
						break;
					}
					switch( schemeField.id ) {
						case 1: // METHODS
							if( schemeField.type == org.apache.thrift.protocol.TType.LIST ) {
								{
									org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
									struct.methods = new java.util.ArrayList<java.lang.String>( _list8.size );
									java.lang.String _elem9;
									for( int _i10 = 0; _i10 < _list8.size; ++_i10 ) {
										_elem9 = iprot.readString();
										struct.methods.add( _elem9 );
									}
									iprot.readListEnd();
								}
								struct.setMethodsIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 2: // RANDOM
							if( schemeField.type == org.apache.thrift.protocol.TType.BOOL ) {
								struct.random = iprot.readBool();
								struct.setRandomIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 3: // ERR_NO
							if( schemeField.type == org.apache.thrift.protocol.TType.I32 ) {
								struct.err_no = iprot.readI32();
								struct.setErr_noIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 4: // PROBABILITY
							if( schemeField.type == org.apache.thrift.protocol.TType.I32 ) {
								struct.probability = iprot.readI32();
								struct.setProbabilityIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 5: // REGEXP
							if( schemeField.type == org.apache.thrift.protocol.TType.STRING ) {
								struct.regexp = iprot.readString();
								struct.setRegexpIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 6: // KILL_CALLER
							if( schemeField.type == org.apache.thrift.protocol.TType.BOOL ) {
								struct.kill_caller = iprot.readBool();
								struct.setKill_callerIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 7: // DELAY_US
							if( schemeField.type == org.apache.thrift.protocol.TType.I32 ) {
								struct.delay_us = iprot.readI32();
								struct.setDelay_usIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 8: // AUTO_DELAY
							if( schemeField.type == org.apache.thrift.protocol.TType.BOOL ) {
								struct.auto_delay = iprot.readBool();
								struct.setAuto_delayIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write( org.apache.thrift.protocol.TProtocol oprot, set_fault_args struct ) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin( STRUCT_DESC );
				if( struct.methods != null ) {
					oprot.writeFieldBegin( METHODS_FIELD_DESC );
					{
						oprot.writeListBegin( new org.apache.thrift.protocol.TList( org.apache.thrift.protocol.TType.STRING, struct.methods.size() ) );
						for( java.lang.String _iter11 : struct.methods ) {
							oprot.writeString( _iter11 );
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin( RANDOM_FIELD_DESC );
				oprot.writeBool( struct.random );
				oprot.writeFieldEnd();
				oprot.writeFieldBegin( ERR_NO_FIELD_DESC );
				oprot.writeI32( struct.err_no );
				oprot.writeFieldEnd();
				oprot.writeFieldBegin( PROBABILITY_FIELD_DESC );
				oprot.writeI32( struct.probability );
				oprot.writeFieldEnd();
				if( struct.regexp != null ) {
					oprot.writeFieldBegin( REGEXP_FIELD_DESC );
					oprot.writeString( struct.regexp );
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin( KILL_CALLER_FIELD_DESC );
				oprot.writeBool( struct.kill_caller );
				oprot.writeFieldEnd();
				oprot.writeFieldBegin( DELAY_US_FIELD_DESC );
				oprot.writeI32( struct.delay_us );
				oprot.writeFieldEnd();
				oprot.writeFieldBegin( AUTO_DELAY_FIELD_DESC );
				oprot.writeBool( struct.auto_delay );
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class set_fault_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public set_fault_argsTupleScheme getScheme() {
				return new set_fault_argsTupleScheme();
			}
		}

		private static class set_fault_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<set_fault_args> {

			@Override
			public void write( org.apache.thrift.protocol.TProtocol prot, set_fault_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if( struct.isSetMethods() ) {
					optionals.set( 0 );
				}
				if( struct.isSetRandom() ) {
					optionals.set( 1 );
				}
				if( struct.isSetErr_no() ) {
					optionals.set( 2 );
				}
				if( struct.isSetProbability() ) {
					optionals.set( 3 );
				}
				if( struct.isSetRegexp() ) {
					optionals.set( 4 );
				}
				if( struct.isSetKill_caller() ) {
					optionals.set( 5 );
				}
				if( struct.isSetDelay_us() ) {
					optionals.set( 6 );
				}
				if( struct.isSetAuto_delay() ) {
					optionals.set( 7 );
				}
				oprot.writeBitSet( optionals, 8 );
				if( struct.isSetMethods() ) {
					{
						oprot.writeI32( struct.methods.size() );
						for( java.lang.String _iter12 : struct.methods ) {
							oprot.writeString( _iter12 );
						}
					}
				}
				if( struct.isSetRandom() ) {
					oprot.writeBool( struct.random );
				}
				if( struct.isSetErr_no() ) {
					oprot.writeI32( struct.err_no );
				}
				if( struct.isSetProbability() ) {
					oprot.writeI32( struct.probability );
				}
				if( struct.isSetRegexp() ) {
					oprot.writeString( struct.regexp );
				}
				if( struct.isSetKill_caller() ) {
					oprot.writeBool( struct.kill_caller );
				}
				if( struct.isSetDelay_us() ) {
					oprot.writeI32( struct.delay_us );
				}
				if( struct.isSetAuto_delay() ) {
					oprot.writeBool( struct.auto_delay );
				}
			}

			@Override
			public void read( org.apache.thrift.protocol.TProtocol prot, set_fault_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
				java.util.BitSet incoming = iprot.readBitSet( 8 );
				if( incoming.get( 0 ) ) {
					{
						org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList( org.apache.thrift.protocol.TType.STRING, iprot.readI32() );
						struct.methods = new java.util.ArrayList<java.lang.String>( _list13.size );
						java.lang.String _elem14;
						for( int _i15 = 0; _i15 < _list13.size; ++_i15 ) {
							_elem14 = iprot.readString();
							struct.methods.add( _elem14 );
						}
					}
					struct.setMethodsIsSet( true );
				}
				if( incoming.get( 1 ) ) {
					struct.random = iprot.readBool();
					struct.setRandomIsSet( true );
				}
				if( incoming.get( 2 ) ) {
					struct.err_no = iprot.readI32();
					struct.setErr_noIsSet( true );
				}
				if( incoming.get( 3 ) ) {
					struct.probability = iprot.readI32();
					struct.setProbabilityIsSet( true );
				}
				if( incoming.get( 4 ) ) {
					struct.regexp = iprot.readString();
					struct.setRegexpIsSet( true );
				}
				if( incoming.get( 5 ) ) {
					struct.kill_caller = iprot.readBool();
					struct.setKill_callerIsSet( true );
				}
				if( incoming.get( 6 ) ) {
					struct.delay_us = iprot.readI32();
					struct.setDelay_usIsSet( true );
				}
				if( incoming.get( 7 ) ) {
					struct.auto_delay = iprot.readBool();
					struct.setAuto_delayIsSet( true );
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme( org.apache.thrift.protocol.TProtocol proto ) {
			return ( org.apache.thrift.scheme.StandardScheme.class.equals( proto.getScheme() ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ).getScheme();
		}
	}

	public static class set_fault_result implements org.apache.thrift.TBase<set_fault_result, set_fault_result._Fields>, java.io.Serializable, Cloneable, Comparable<set_fault_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "set_fault_result" );


		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new set_fault_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new set_fault_resultTupleSchemeFactory();


		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for( _Fields field : java.util.EnumSet.allOf( _Fields.class ) ) {
					byName.put( field.getFieldName(), field );
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId( int fieldId ) {
				switch( fieldId ) {
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow( int fieldId ) {
				_Fields fields = findByThriftId( fieldId );
				if( fields == null ) {
					throw new java.lang.IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
				}
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName( java.lang.String name ) {
				return byName.get( name );
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields( short thriftId, java.lang.String fieldName ) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>( _Fields.class );
			metaDataMap = java.util.Collections.unmodifiableMap( tmpMap );
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( set_fault_result.class, metaDataMap );
		}

		public set_fault_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public set_fault_result( set_fault_result other ) {
		}

		public set_fault_result deepCopy() {
			return new set_fault_result( this );
		}

		@Override
		public void clear() {
		}

		public void setFieldValue( _Fields field, java.lang.Object value ) {
			switch( field ) {
			}
		}

		public java.lang.Object getFieldValue( _Fields field ) {
			switch( field ) {
			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet( _Fields field ) {
			if( field == null ) {
				throw new java.lang.IllegalArgumentException();
			}

			switch( field ) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals( java.lang.Object that ) {
			if( that == null ) {
				return false;
			}
			if( that instanceof set_fault_result ) {
				return this.equals( ( set_fault_result ) that );
			}
			return false;
		}

		public boolean equals( set_fault_result that ) {
			if( that == null ) {
				return false;
			}
			if( this == that ) {
				return true;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo( set_fault_result other ) {
			if( !getClass().equals( other.getClass() ) ) {
				return getClass().getName().compareTo( other.getClass().getName() );
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId( int fieldId ) {
			return _Fields.findByThriftId( fieldId );
		}

		public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {
			scheme( iprot ).read( iprot, this );
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {
			scheme( oprot ).write( oprot, this );
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder( "set_fault_result(" );
			boolean first = true;

			sb.append( ")" );
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {
			try {
				write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private static class set_fault_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public set_fault_resultStandardScheme getScheme() {
				return new set_fault_resultStandardScheme();
			}
		}

		private static class set_fault_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<set_fault_result> {

			public void read( org.apache.thrift.protocol.TProtocol iprot, set_fault_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while( true ) {
					schemeField = iprot.readFieldBegin();
					if( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
						break;
					}
					switch( schemeField.id ) {
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write( org.apache.thrift.protocol.TProtocol oprot, set_fault_result struct ) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin( STRUCT_DESC );
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class set_fault_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public set_fault_resultTupleScheme getScheme() {
				return new set_fault_resultTupleScheme();
			}
		}

		private static class set_fault_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<set_fault_result> {

			@Override
			public void write( org.apache.thrift.protocol.TProtocol prot, set_fault_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
			}

			@Override
			public void read( org.apache.thrift.protocol.TProtocol prot, set_fault_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme( org.apache.thrift.protocol.TProtocol proto ) {
			return ( org.apache.thrift.scheme.StandardScheme.class.equals( proto.getScheme() ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ).getScheme();
		}
	}

	public static class set_all_fault_args implements org.apache.thrift.TBase<set_all_fault_args, set_all_fault_args._Fields>, java.io.Serializable, Cloneable, Comparable<set_all_fault_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "set_all_fault_args" );

		private static final org.apache.thrift.protocol.TField RANDOM_FIELD_DESC = new org.apache.thrift.protocol.TField( "random", org.apache.thrift.protocol.TType.BOOL, ( short ) 1 );
		private static final org.apache.thrift.protocol.TField ERR_NO_FIELD_DESC = new org.apache.thrift.protocol.TField( "err_no", org.apache.thrift.protocol.TType.I32, ( short ) 2 );
		private static final org.apache.thrift.protocol.TField PROBABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField( "probability", org.apache.thrift.protocol.TType.I32, ( short ) 3 );
		private static final org.apache.thrift.protocol.TField REGEXP_FIELD_DESC = new org.apache.thrift.protocol.TField( "regexp", org.apache.thrift.protocol.TType.STRING, ( short ) 4 );
		private static final org.apache.thrift.protocol.TField KILL_CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField( "kill_caller", org.apache.thrift.protocol.TType.BOOL, ( short ) 5 );
		private static final org.apache.thrift.protocol.TField DELAY_US_FIELD_DESC = new org.apache.thrift.protocol.TField( "delay_us", org.apache.thrift.protocol.TType.I32, ( short ) 6 );
		private static final org.apache.thrift.protocol.TField AUTO_DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField( "auto_delay", org.apache.thrift.protocol.TType.BOOL, ( short ) 7 );

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new set_all_fault_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new set_all_fault_argsTupleSchemeFactory();

		public boolean random; // required
		public int err_no; // required
		public int probability; // required
		public java.lang.String regexp; // required
		public boolean kill_caller; // required
		public int delay_us; // required
		public boolean auto_delay; // required

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			RANDOM( ( short ) 1, "random" ),
			ERR_NO( ( short ) 2, "err_no" ),
			PROBABILITY( ( short ) 3, "probability" ),
			REGEXP( ( short ) 4, "regexp" ),
			KILL_CALLER( ( short ) 5, "kill_caller" ),
			DELAY_US( ( short ) 6, "delay_us" ),
			AUTO_DELAY( ( short ) 7, "auto_delay" );

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for( _Fields field : java.util.EnumSet.allOf( _Fields.class ) ) {
					byName.put( field.getFieldName(), field );
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId( int fieldId ) {
				switch( fieldId ) {
					case 1: // RANDOM
						return RANDOM;
					case 2: // ERR_NO
						return ERR_NO;
					case 3: // PROBABILITY
						return PROBABILITY;
					case 4: // REGEXP
						return REGEXP;
					case 5: // KILL_CALLER
						return KILL_CALLER;
					case 6: // DELAY_US
						return DELAY_US;
					case 7: // AUTO_DELAY
						return AUTO_DELAY;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow( int fieldId ) {
				_Fields fields = findByThriftId( fieldId );
				if( fields == null ) {
					throw new java.lang.IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
				}
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName( java.lang.String name ) {
				return byName.get( name );
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields( short thriftId, java.lang.String fieldName ) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __RANDOM_ISSET_ID = 0;
		private static final int __ERR_NO_ISSET_ID = 1;
		private static final int __PROBABILITY_ISSET_ID = 2;
		private static final int __KILL_CALLER_ISSET_ID = 3;
		private static final int __DELAY_US_ISSET_ID = 4;
		private static final int __AUTO_DELAY_ISSET_ID = 5;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>( _Fields.class );
			tmpMap.put( _Fields.RANDOM, new org.apache.thrift.meta_data.FieldMetaData( "random", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                           new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.BOOL ) ) );
			tmpMap.put( _Fields.ERR_NO, new org.apache.thrift.meta_data.FieldMetaData( "err_no", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                           new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.I32 ) ) );
			tmpMap.put( _Fields.PROBABILITY, new org.apache.thrift.meta_data.FieldMetaData( "probability", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                                new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.I32 ) ) );
			tmpMap.put( _Fields.REGEXP, new org.apache.thrift.meta_data.FieldMetaData( "regexp", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                           new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.STRING ) ) );
			tmpMap.put( _Fields.KILL_CALLER, new org.apache.thrift.meta_data.FieldMetaData( "kill_caller", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                                new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.BOOL ) ) );
			tmpMap.put( _Fields.DELAY_US, new org.apache.thrift.meta_data.FieldMetaData( "delay_us", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                             new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.I32 ) ) );
			tmpMap.put( _Fields.AUTO_DELAY, new org.apache.thrift.meta_data.FieldMetaData( "auto_delay", org.apache.thrift.TFieldRequirementType.DEFAULT,
			                                                                               new org.apache.thrift.meta_data.FieldValueMetaData( org.apache.thrift.protocol.TType.BOOL ) ) );
			metaDataMap = java.util.Collections.unmodifiableMap( tmpMap );
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( set_all_fault_args.class, metaDataMap );
		}

		public set_all_fault_args() {
		}

		public set_all_fault_args(
				boolean random,
				int err_no,
				int probability,
				java.lang.String regexp,
				boolean kill_caller,
				int delay_us,
				boolean auto_delay ) {
			this();
			this.random = random;
			setRandomIsSet( true );
			this.err_no = err_no;
			setErr_noIsSet( true );
			this.probability = probability;
			setProbabilityIsSet( true );
			this.regexp = regexp;
			this.kill_caller = kill_caller;
			setKill_callerIsSet( true );
			this.delay_us = delay_us;
			setDelay_usIsSet( true );
			this.auto_delay = auto_delay;
			setAuto_delayIsSet( true );
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public set_all_fault_args( set_all_fault_args other ) {
			__isset_bitfield = other.__isset_bitfield;
			this.random = other.random;
			this.err_no = other.err_no;
			this.probability = other.probability;
			if( other.isSetRegexp() ) {
				this.regexp = other.regexp;
			}
			this.kill_caller = other.kill_caller;
			this.delay_us = other.delay_us;
			this.auto_delay = other.auto_delay;
		}

		public set_all_fault_args deepCopy() {
			return new set_all_fault_args( this );
		}

		@Override
		public void clear() {
			setRandomIsSet( false );
			this.random = false;
			setErr_noIsSet( false );
			this.err_no = 0;
			setProbabilityIsSet( false );
			this.probability = 0;
			this.regexp = null;
			setKill_callerIsSet( false );
			this.kill_caller = false;
			setDelay_usIsSet( false );
			this.delay_us = 0;
			setAuto_delayIsSet( false );
			this.auto_delay = false;
		}

		public boolean isRandom() {
			return this.random;
		}

		public set_all_fault_args setRandom( boolean random ) {
			this.random = random;
			setRandomIsSet( true );
			return this;
		}

		public void unsetRandom() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit( __isset_bitfield, __RANDOM_ISSET_ID );
		}

		/** Returns true if field random is set (has been assigned a value) and false otherwise */
		public boolean isSetRandom() {
			return org.apache.thrift.EncodingUtils.testBit( __isset_bitfield, __RANDOM_ISSET_ID );
		}

		public void setRandomIsSet( boolean value ) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit( __isset_bitfield, __RANDOM_ISSET_ID, value );
		}

		public int getErr_no() {
			return this.err_no;
		}

		public set_all_fault_args setErr_no( int err_no ) {
			this.err_no = err_no;
			setErr_noIsSet( true );
			return this;
		}

		public void unsetErr_no() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit( __isset_bitfield, __ERR_NO_ISSET_ID );
		}

		/** Returns true if field err_no is set (has been assigned a value) and false otherwise */
		public boolean isSetErr_no() {
			return org.apache.thrift.EncodingUtils.testBit( __isset_bitfield, __ERR_NO_ISSET_ID );
		}

		public void setErr_noIsSet( boolean value ) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit( __isset_bitfield, __ERR_NO_ISSET_ID, value );
		}

		public int getProbability() {
			return this.probability;
		}

		public set_all_fault_args setProbability( int probability ) {
			this.probability = probability;
			setProbabilityIsSet( true );
			return this;
		}

		public void unsetProbability() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit( __isset_bitfield, __PROBABILITY_ISSET_ID );
		}

		/** Returns true if field probability is set (has been assigned a value) and false otherwise */
		public boolean isSetProbability() {
			return org.apache.thrift.EncodingUtils.testBit( __isset_bitfield, __PROBABILITY_ISSET_ID );
		}

		public void setProbabilityIsSet( boolean value ) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit( __isset_bitfield, __PROBABILITY_ISSET_ID, value );
		}

		public java.lang.String getRegexp() {
			return this.regexp;
		}

		public set_all_fault_args setRegexp( java.lang.String regexp ) {
			this.regexp = regexp;
			return this;
		}

		public void unsetRegexp() {
			this.regexp = null;
		}

		/** Returns true if field regexp is set (has been assigned a value) and false otherwise */
		public boolean isSetRegexp() {
			return this.regexp != null;
		}

		public void setRegexpIsSet( boolean value ) {
			if( !value ) {
				this.regexp = null;
			}
		}

		public boolean isKill_caller() {
			return this.kill_caller;
		}

		public set_all_fault_args setKill_caller( boolean kill_caller ) {
			this.kill_caller = kill_caller;
			setKill_callerIsSet( true );
			return this;
		}

		public void unsetKill_caller() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit( __isset_bitfield, __KILL_CALLER_ISSET_ID );
		}

		/** Returns true if field kill_caller is set (has been assigned a value) and false otherwise */
		public boolean isSetKill_caller() {
			return org.apache.thrift.EncodingUtils.testBit( __isset_bitfield, __KILL_CALLER_ISSET_ID );
		}

		public void setKill_callerIsSet( boolean value ) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit( __isset_bitfield, __KILL_CALLER_ISSET_ID, value );
		}

		public int getDelay_us() {
			return this.delay_us;
		}

		public set_all_fault_args setDelay_us( int delay_us ) {
			this.delay_us = delay_us;
			setDelay_usIsSet( true );
			return this;
		}

		public void unsetDelay_us() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit( __isset_bitfield, __DELAY_US_ISSET_ID );
		}

		/** Returns true if field delay_us is set (has been assigned a value) and false otherwise */
		public boolean isSetDelay_us() {
			return org.apache.thrift.EncodingUtils.testBit( __isset_bitfield, __DELAY_US_ISSET_ID );
		}

		public void setDelay_usIsSet( boolean value ) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit( __isset_bitfield, __DELAY_US_ISSET_ID, value );
		}

		public boolean isAuto_delay() {
			return this.auto_delay;
		}

		public set_all_fault_args setAuto_delay( boolean auto_delay ) {
			this.auto_delay = auto_delay;
			setAuto_delayIsSet( true );
			return this;
		}

		public void unsetAuto_delay() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit( __isset_bitfield, __AUTO_DELAY_ISSET_ID );
		}

		/** Returns true if field auto_delay is set (has been assigned a value) and false otherwise */
		public boolean isSetAuto_delay() {
			return org.apache.thrift.EncodingUtils.testBit( __isset_bitfield, __AUTO_DELAY_ISSET_ID );
		}

		public void setAuto_delayIsSet( boolean value ) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit( __isset_bitfield, __AUTO_DELAY_ISSET_ID, value );
		}

		public void setFieldValue( _Fields field, java.lang.Object value ) {
			switch( field ) {
				case RANDOM:
					if( value == null ) {
						unsetRandom();
					} else {
						setRandom( ( java.lang.Boolean ) value );
					}
					break;

				case ERR_NO:
					if( value == null ) {
						unsetErr_no();
					} else {
						setErr_no( ( java.lang.Integer ) value );
					}
					break;

				case PROBABILITY:
					if( value == null ) {
						unsetProbability();
					} else {
						setProbability( ( java.lang.Integer ) value );
					}
					break;

				case REGEXP:
					if( value == null ) {
						unsetRegexp();
					} else {
						setRegexp( ( java.lang.String ) value );
					}
					break;

				case KILL_CALLER:
					if( value == null ) {
						unsetKill_caller();
					} else {
						setKill_caller( ( java.lang.Boolean ) value );
					}
					break;

				case DELAY_US:
					if( value == null ) {
						unsetDelay_us();
					} else {
						setDelay_us( ( java.lang.Integer ) value );
					}
					break;

				case AUTO_DELAY:
					if( value == null ) {
						unsetAuto_delay();
					} else {
						setAuto_delay( ( java.lang.Boolean ) value );
					}
					break;

			}
		}

		public java.lang.Object getFieldValue( _Fields field ) {
			switch( field ) {
				case RANDOM:
					return isRandom();

				case ERR_NO:
					return getErr_no();

				case PROBABILITY:
					return getProbability();

				case REGEXP:
					return getRegexp();

				case KILL_CALLER:
					return isKill_caller();

				case DELAY_US:
					return getDelay_us();

				case AUTO_DELAY:
					return isAuto_delay();

			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet( _Fields field ) {
			if( field == null ) {
				throw new java.lang.IllegalArgumentException();
			}

			switch( field ) {
				case RANDOM:
					return isSetRandom();
				case ERR_NO:
					return isSetErr_no();
				case PROBABILITY:
					return isSetProbability();
				case REGEXP:
					return isSetRegexp();
				case KILL_CALLER:
					return isSetKill_caller();
				case DELAY_US:
					return isSetDelay_us();
				case AUTO_DELAY:
					return isSetAuto_delay();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals( java.lang.Object that ) {
			if( that == null ) {
				return false;
			}
			if( that instanceof set_all_fault_args ) {
				return this.equals( ( set_all_fault_args ) that );
			}
			return false;
		}

		public boolean equals( set_all_fault_args that ) {
			if( that == null ) {
				return false;
			}
			if( this == that ) {
				return true;
			}

			boolean this_present_random = true;
			boolean that_present_random = true;
			if( this_present_random || that_present_random ) {
				if( !( this_present_random && that_present_random ) ) {
					return false;
				}
				if( this.random != that.random ) {
					return false;
				}
			}

			boolean this_present_err_no = true;
			boolean that_present_err_no = true;
			if( this_present_err_no || that_present_err_no ) {
				if( !( this_present_err_no && that_present_err_no ) ) {
					return false;
				}
				if( this.err_no != that.err_no ) {
					return false;
				}
			}

			boolean this_present_probability = true;
			boolean that_present_probability = true;
			if( this_present_probability || that_present_probability ) {
				if( !( this_present_probability && that_present_probability ) ) {
					return false;
				}
				if( this.probability != that.probability ) {
					return false;
				}
			}

			boolean this_present_regexp = true && this.isSetRegexp();
			boolean that_present_regexp = true && that.isSetRegexp();
			if( this_present_regexp || that_present_regexp ) {
				if( !( this_present_regexp && that_present_regexp ) ) {
					return false;
				}
				if( !this.regexp.equals( that.regexp ) ) {
					return false;
				}
			}

			boolean this_present_kill_caller = true;
			boolean that_present_kill_caller = true;
			if( this_present_kill_caller || that_present_kill_caller ) {
				if( !( this_present_kill_caller && that_present_kill_caller ) ) {
					return false;
				}
				if( this.kill_caller != that.kill_caller ) {
					return false;
				}
			}

			boolean this_present_delay_us = true;
			boolean that_present_delay_us = true;
			if( this_present_delay_us || that_present_delay_us ) {
				if( !( this_present_delay_us && that_present_delay_us ) ) {
					return false;
				}
				if( this.delay_us != that.delay_us ) {
					return false;
				}
			}

			boolean this_present_auto_delay = true;
			boolean that_present_auto_delay = true;
			if( this_present_auto_delay || that_present_auto_delay ) {
				if( !( this_present_auto_delay && that_present_auto_delay ) ) {
					return false;
				}
				if( this.auto_delay != that.auto_delay ) {
					return false;
				}
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ( ( random ) ? 131071 : 524287 );

			hashCode = hashCode * 8191 + err_no;

			hashCode = hashCode * 8191 + probability;

			hashCode = hashCode * 8191 + ( ( isSetRegexp() ) ? 131071 : 524287 );
			if( isSetRegexp() ) {
				hashCode = hashCode * 8191 + regexp.hashCode();
			}

			hashCode = hashCode * 8191 + ( ( kill_caller ) ? 131071 : 524287 );

			hashCode = hashCode * 8191 + delay_us;

			hashCode = hashCode * 8191 + ( ( auto_delay ) ? 131071 : 524287 );

			return hashCode;
		}

		@Override
		public int compareTo( set_all_fault_args other ) {
			if( !getClass().equals( other.getClass() ) ) {
				return getClass().getName().compareTo( other.getClass().getName() );
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf( isSetRandom() ).compareTo( other.isSetRandom() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetRandom() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.random, other.random );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetErr_no() ).compareTo( other.isSetErr_no() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetErr_no() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.err_no, other.err_no );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetProbability() ).compareTo( other.isSetProbability() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetProbability() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.probability, other.probability );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetRegexp() ).compareTo( other.isSetRegexp() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetRegexp() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.regexp, other.regexp );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetKill_caller() ).compareTo( other.isSetKill_caller() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetKill_caller() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.kill_caller, other.kill_caller );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetDelay_us() ).compareTo( other.isSetDelay_us() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetDelay_us() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.delay_us, other.delay_us );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf( isSetAuto_delay() ).compareTo( other.isSetAuto_delay() );
			if( lastComparison != 0 ) {
				return lastComparison;
			}
			if( isSetAuto_delay() ) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo( this.auto_delay, other.auto_delay );
				if( lastComparison != 0 ) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId( int fieldId ) {
			return _Fields.findByThriftId( fieldId );
		}

		public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {
			scheme( iprot ).read( iprot, this );
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {
			scheme( oprot ).write( oprot, this );
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder( "set_all_fault_args(" );
			boolean first = true;

			sb.append( "random:" );
			sb.append( this.random );
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "err_no:" );
			sb.append( this.err_no );
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "probability:" );
			sb.append( this.probability );
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "regexp:" );
			if( this.regexp == null ) {
				sb.append( "null" );
			} else {
				sb.append( this.regexp );
			}
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "kill_caller:" );
			sb.append( this.kill_caller );
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "delay_us:" );
			sb.append( this.delay_us );
			first = false;
			if( !first ) {
				sb.append( ", " );
			}
			sb.append( "auto_delay:" );
			sb.append( this.auto_delay );
			first = false;
			sb.append( ")" );
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {
			try {
				write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private static class set_all_fault_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public set_all_fault_argsStandardScheme getScheme() {
				return new set_all_fault_argsStandardScheme();
			}
		}

		private static class set_all_fault_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<set_all_fault_args> {

			public void read( org.apache.thrift.protocol.TProtocol iprot, set_all_fault_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while( true ) {
					schemeField = iprot.readFieldBegin();
					if( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
						break;
					}
					switch( schemeField.id ) {
						case 1: // RANDOM
							if( schemeField.type == org.apache.thrift.protocol.TType.BOOL ) {
								struct.random = iprot.readBool();
								struct.setRandomIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 2: // ERR_NO
							if( schemeField.type == org.apache.thrift.protocol.TType.I32 ) {
								struct.err_no = iprot.readI32();
								struct.setErr_noIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 3: // PROBABILITY
							if( schemeField.type == org.apache.thrift.protocol.TType.I32 ) {
								struct.probability = iprot.readI32();
								struct.setProbabilityIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 4: // REGEXP
							if( schemeField.type == org.apache.thrift.protocol.TType.STRING ) {
								struct.regexp = iprot.readString();
								struct.setRegexpIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 5: // KILL_CALLER
							if( schemeField.type == org.apache.thrift.protocol.TType.BOOL ) {
								struct.kill_caller = iprot.readBool();
								struct.setKill_callerIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 6: // DELAY_US
							if( schemeField.type == org.apache.thrift.protocol.TType.I32 ) {
								struct.delay_us = iprot.readI32();
								struct.setDelay_usIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						case 7: // AUTO_DELAY
							if( schemeField.type == org.apache.thrift.protocol.TType.BOOL ) {
								struct.auto_delay = iprot.readBool();
								struct.setAuto_delayIsSet( true );
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write( org.apache.thrift.protocol.TProtocol oprot, set_all_fault_args struct ) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin( STRUCT_DESC );
				oprot.writeFieldBegin( RANDOM_FIELD_DESC );
				oprot.writeBool( struct.random );
				oprot.writeFieldEnd();
				oprot.writeFieldBegin( ERR_NO_FIELD_DESC );
				oprot.writeI32( struct.err_no );
				oprot.writeFieldEnd();
				oprot.writeFieldBegin( PROBABILITY_FIELD_DESC );
				oprot.writeI32( struct.probability );
				oprot.writeFieldEnd();
				if( struct.regexp != null ) {
					oprot.writeFieldBegin( REGEXP_FIELD_DESC );
					oprot.writeString( struct.regexp );
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin( KILL_CALLER_FIELD_DESC );
				oprot.writeBool( struct.kill_caller );
				oprot.writeFieldEnd();
				oprot.writeFieldBegin( DELAY_US_FIELD_DESC );
				oprot.writeI32( struct.delay_us );
				oprot.writeFieldEnd();
				oprot.writeFieldBegin( AUTO_DELAY_FIELD_DESC );
				oprot.writeBool( struct.auto_delay );
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class set_all_fault_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public set_all_fault_argsTupleScheme getScheme() {
				return new set_all_fault_argsTupleScheme();
			}
		}

		private static class set_all_fault_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<set_all_fault_args> {

			@Override
			public void write( org.apache.thrift.protocol.TProtocol prot, set_all_fault_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if( struct.isSetRandom() ) {
					optionals.set( 0 );
				}
				if( struct.isSetErr_no() ) {
					optionals.set( 1 );
				}
				if( struct.isSetProbability() ) {
					optionals.set( 2 );
				}
				if( struct.isSetRegexp() ) {
					optionals.set( 3 );
				}
				if( struct.isSetKill_caller() ) {
					optionals.set( 4 );
				}
				if( struct.isSetDelay_us() ) {
					optionals.set( 5 );
				}
				if( struct.isSetAuto_delay() ) {
					optionals.set( 6 );
				}
				oprot.writeBitSet( optionals, 7 );
				if( struct.isSetRandom() ) {
					oprot.writeBool( struct.random );
				}
				if( struct.isSetErr_no() ) {
					oprot.writeI32( struct.err_no );
				}
				if( struct.isSetProbability() ) {
					oprot.writeI32( struct.probability );
				}
				if( struct.isSetRegexp() ) {
					oprot.writeString( struct.regexp );
				}
				if( struct.isSetKill_caller() ) {
					oprot.writeBool( struct.kill_caller );
				}
				if( struct.isSetDelay_us() ) {
					oprot.writeI32( struct.delay_us );
				}
				if( struct.isSetAuto_delay() ) {
					oprot.writeBool( struct.auto_delay );
				}
			}

			@Override
			public void read( org.apache.thrift.protocol.TProtocol prot, set_all_fault_args struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
				java.util.BitSet incoming = iprot.readBitSet( 7 );
				if( incoming.get( 0 ) ) {
					struct.random = iprot.readBool();
					struct.setRandomIsSet( true );
				}
				if( incoming.get( 1 ) ) {
					struct.err_no = iprot.readI32();
					struct.setErr_noIsSet( true );
				}
				if( incoming.get( 2 ) ) {
					struct.probability = iprot.readI32();
					struct.setProbabilityIsSet( true );
				}
				if( incoming.get( 3 ) ) {
					struct.regexp = iprot.readString();
					struct.setRegexpIsSet( true );
				}
				if( incoming.get( 4 ) ) {
					struct.kill_caller = iprot.readBool();
					struct.setKill_callerIsSet( true );
				}
				if( incoming.get( 5 ) ) {
					struct.delay_us = iprot.readI32();
					struct.setDelay_usIsSet( true );
				}
				if( incoming.get( 6 ) ) {
					struct.auto_delay = iprot.readBool();
					struct.setAuto_delayIsSet( true );
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme( org.apache.thrift.protocol.TProtocol proto ) {
			return ( org.apache.thrift.scheme.StandardScheme.class.equals( proto.getScheme() ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ).getScheme();
		}
	}

	public static class set_all_fault_result implements org.apache.thrift.TBase<set_all_fault_result, set_all_fault_result._Fields>, java.io.Serializable, Cloneable, Comparable<set_all_fault_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct( "set_all_fault_result" );


		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new set_all_fault_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new set_all_fault_resultTupleSchemeFactory();


		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for( _Fields field : java.util.EnumSet.allOf( _Fields.class ) ) {
					byName.put( field.getFieldName(), field );
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId( int fieldId ) {
				switch( fieldId ) {
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow( int fieldId ) {
				_Fields fields = findByThriftId( fieldId );
				if( fields == null ) {
					throw new java.lang.IllegalArgumentException( "Field " + fieldId + " doesn't exist!" );
				}
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName( java.lang.String name ) {
				return byName.get( name );
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields( short thriftId, java.lang.String fieldName ) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>( _Fields.class );
			metaDataMap = java.util.Collections.unmodifiableMap( tmpMap );
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( set_all_fault_result.class, metaDataMap );
		}

		public set_all_fault_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public set_all_fault_result( set_all_fault_result other ) {
		}

		public set_all_fault_result deepCopy() {
			return new set_all_fault_result( this );
		}

		@Override
		public void clear() {
		}

		public void setFieldValue( _Fields field, java.lang.Object value ) {
			switch( field ) {
			}
		}

		public java.lang.Object getFieldValue( _Fields field ) {
			switch( field ) {
			}
			throw new java.lang.IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet( _Fields field ) {
			if( field == null ) {
				throw new java.lang.IllegalArgumentException();
			}

			switch( field ) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals( java.lang.Object that ) {
			if( that == null ) {
				return false;
			}
			if( that instanceof set_all_fault_result ) {
				return this.equals( ( set_all_fault_result ) that );
			}
			return false;
		}

		public boolean equals( set_all_fault_result that ) {
			if( that == null ) {
				return false;
			}
			if( this == that ) {
				return true;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo( set_all_fault_result other ) {
			if( !getClass().equals( other.getClass() ) ) {
				return getClass().getName().compareTo( other.getClass().getName() );
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId( int fieldId ) {
			return _Fields.findByThriftId( fieldId );
		}

		public void read( org.apache.thrift.protocol.TProtocol iprot ) throws org.apache.thrift.TException {
			scheme( iprot ).read( iprot, this );
		}

		public void write( org.apache.thrift.protocol.TProtocol oprot ) throws org.apache.thrift.TException {
			scheme( oprot ).write( oprot, this );
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder( "set_all_fault_result(" );
			boolean first = true;

			sb.append( ")" );
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject( java.io.ObjectOutputStream out ) throws java.io.IOException {
			try {
				write( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( out ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private void readObject( java.io.ObjectInputStream in ) throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read( new org.apache.thrift.protocol.TCompactProtocol( new org.apache.thrift.transport.TIOStreamTransport( in ) ) );
			} catch( org.apache.thrift.TException te ) {
				throw new java.io.IOException( te );
			}
		}

		private static class set_all_fault_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public set_all_fault_resultStandardScheme getScheme() {
				return new set_all_fault_resultStandardScheme();
			}
		}

		private static class set_all_fault_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<set_all_fault_result> {

			public void read( org.apache.thrift.protocol.TProtocol iprot, set_all_fault_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while( true ) {
					schemeField = iprot.readFieldBegin();
					if( schemeField.type == org.apache.thrift.protocol.TType.STOP ) {
						break;
					}
					switch( schemeField.id ) {
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip( iprot, schemeField.type );
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write( org.apache.thrift.protocol.TProtocol oprot, set_all_fault_result struct ) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin( STRUCT_DESC );
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class set_all_fault_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public set_all_fault_resultTupleScheme getScheme() {
				return new set_all_fault_resultTupleScheme();
			}
		}

		private static class set_all_fault_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<set_all_fault_result> {

			@Override
			public void write( org.apache.thrift.protocol.TProtocol prot, set_all_fault_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
			}

			@Override
			public void read( org.apache.thrift.protocol.TProtocol prot, set_all_fault_result struct ) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = ( org.apache.thrift.protocol.TTupleProtocol ) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme( org.apache.thrift.protocol.TProtocol proto ) {
			return ( org.apache.thrift.scheme.StandardScheme.class.equals( proto.getScheme() ) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY ).getScheme();
		}
	}

}
